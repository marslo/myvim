" =============================================================================
"      FileName: vimrc_terminal
"          Desc: Made in Marslo
"        Author: Marslo Jiao
"         Email: marslo.jiao@gmail.com
"       Created: 2010-10
"       Version: 0.0.24
"    LastChange: 2016-04-25 21:02:55
" =============================================================================

set nocompatible
set history=300
set diffopt=filler,context:3
runtime macros/matchit.vim

set fileformat=unix
set wrap                                                          " Wrap lines
set viminfo=%,<800,'10,/50,:100,h,f0,n~/.vim/cache/.viminfo
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set tags=tags
let bud=expand('~/.vim/bundle') . '/'
let performance_mode = 1

" ====================================== For Property =====================================
let mapleader=","
let g:mapleader=","

" Vim Bundle
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

Bundle 'gmarik/vundle'
Bundle 'tpope/vim-pathogen'
Bundle 'Yggdroot/indentLine'
Bundle 'dantezhu/authorinfo'
Bundle 'Marslo/EnhCommentify.vim'
Bundle 'ervandew/supertab'
Bundle 'Marslo/auto-pairs'
Bundle 'Marslo/snipmate.vim.git'
Bundle 'yegappan/mru'
Bundle 'vim-syntastic/syntastic'
Bundle 'Marslo/MarsloFunc'
Bundle 'LargeFile'
" Python
Bundle 'klen/python-mode'
Bundle 'python_fold'
Bundle 'Marslo/python-syntax'
Bundle 'davidhalter/jedi-vim'
Bundle 'mfukar/robotframework-vim'
" Bundle 'python_match.vim'
" Bundle 'tarmack/vim-python-ftplugin'
" Web design
Bundle 'tpope/vim-surround'
Bundle 'valloric/MatchTagAlways'
" Colors and themes and syntax
Bundle 'luochen1990/rainbow'
Bundle 'txt.vim'
Bundle 'Marslo/vim-coloresque'
Bundle 'Marslo/marslo.vim'
Bundle 'Marslo/MarsloVimOthers'
Bundle 'plasticboy/vim-markdown.git'

call vundle#end()
call pathogen#infect()
filetype plugin indent on
syntax enable on

" ====================================== For My Function =====================================
function! GetVundle()                                                   " GetVundle() inspired by: http://pastebin.com/embed_iframe.php?i=C9fUE0M3
  let vundleAlreadyExists=1
  if has('win32') || has('win64')
    let bud=$VIM . '\bundle'
    let vud=bud . '\vundle'
    let vudcfg=expand(vud . '\.git\config')
  else
    let bud='~/.vim/bundle'
    let vud=bud . '/vundle'
    let vudcfg=expand(vud . '/.git/config')
  endif

  if filereadable(vudcfg)
    echo "Vundle has existed at " . expand(vud)
  else
    echo "Installing Vundle..."
    echo ""
    if isdirectory(expand(bud)) == 0
      call mkdir(expand(bud), 'p')
    endif
    execute 'silent !git clone https://github.com/gmarik/vundle.git "' . expand(vud) . '"'
    let vundleAlreadyExists=0
  endif
endfunction
command! GetVundle :call GetVundle()

if isdirectory(expand(bud . 'MarsloFunc'))
  command! GetVim :call marslofunc#GetVim()<CR>
  nmap cmd :call marslofunc#OpenCMD()<CR>
  nmap gf :call marslofunc#GotoFile()<CR>
  xnoremap * :<C-u>call marslofunc#VSetSearch()<CR>/<C-R>=@/<CR><CR>
  xnoremap # :<C-u>call marslofunc#VSetSearch()<CR>?<C-R>=@/<CR><CR>
  map <M-o> :call marslofunc#OpenFoler()<CR>
  nmap <F12> :call marslofunc#UpdateTags()<CR>
  nmap <C-F5> :call marslofunc#RunResult()<CR>
  nmap <leader>ti :call marslofunc#callit()<CR>

  augroup resCur
    autocmd!
      autocmd BufWinEnter * call marslofunc#ResCur()
  augroup END

  set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\*\\\|\\*/\\\|{{{\\d\\=','','g')
  set foldtext=marslofund#MyFoldText()<CR>
endif

" ====================================== For Programming =====================================
" Programming configs for Python
if has("autocmd")
  au FileType python syn keyword pythonDecorator print self
  au FileType python set tabstop=2 softtabstop=2 shiftwidth=2
  au FileTYpe python set isk-=.
  set textwidth=80
endif
let python_highlight_all = 1                                        " syntax-python

" Python-mode configuratoin
if isdirectory(expand(bud . 'python-mode'))
  nnoremap <leader>p :PymodeLint<CR>                                " Trigger PymodeLint by manual
  let g:pymode = 1                                                  " 1: turn on python-mode plugin
  let g:pymode_syntax_all = 1
  let g:pymode_warnings = 0                                         " turn off plugin's warnings
  let g:pymode_folding = 1
  let g:pymode_options_colorcolumn = 1
  let g:pymode_trim_whitespaces = 1                                 " trim unused white spaces on save
  let g:pymode_lint = 1                                             " turn on code checking
  let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
  let g:pymode_lint_ignore="E111,E114,E501,W0611,E266"              " E501: long line; E111&E114: 4 spaces indent; E266: too many # for comments
  let g:pymode_options = 0
  let g:pymode_rope = 0
  let g:pymode_indent = 0
  let g:pymode_syntax_highlight_self = g:pymode_syntax_all
  let g:pymode_quickfix_minheight = 3
  let g:pymode_quickfix_maxheight = 3
  if !has('python')
    let g:pymode = 0
  endif
  let g:python_check_syntax = 0                                     " Disalbe Check python script syntax on every save
  let g:pymode_lint_on_write = 0                                    " Disalbe on save checking
  " let g:pymode_rope_regenerate_on_write = 0
  let g:pymode_lint_unmodified = 1
  let g:pymode_indent = 1
endif



" ====================================== For Inteface =====================================
if exists('$TMUX')
  set term=screen-256color
endif

if 'xterm-256color' == $TERM
  set t_Co=256
endif
if has('gui_running') || 'xterm-256color' == $TERM
  set background=dark
  colorscheme marslo
  let psc_style='cool'
else
  set t_Co=8
  set t_Sb=^[[4%dm
  set t_Sf=^[[3%dm
  colorscheme marslo16
endif

nmap <leader>v :e ~/.vimrc<CR>
autocmd! bufwritepost ~/.vimrc silent! source %
set guifont=Monaco\ 14
set clipboard=unnamedplus

set iskeyword-=.
set autochdir
set fileencodings=utf-8,ucs-bom,gbk,cp936,gb2312,gb18030            " Code Format
set termencoding=utf-8
set encoding=utf-8                                                  " Input Chinese (=cp936)
set fileencoding=utf-8
let &termencoding=&encoding
set selection=exclusive                                             " Mouse Settings
set selectmode=mouse,key
set nobackup noswapfile nowritebackup noundofile noendofline
set number                                                          " Number: line number
set report=0
set autoread                                                        " Set auto read when a file is changed by outside
set showmatch                                                       " Show matching bracets (shortly jump to the other bracets)
set matchtime=1                                                     " The shortly time
set tabstop=2                                                       " Tab width
set softtabstop=2                                                   " Width for backspace
set shiftwidth=2                                                    " The tab width by using >> & <<
set autoindent smartindent expandtab 
set smarttab                                                        " Smarttab: the width of <Tab> in first line would refer to 'Shiftwidth' parameter
set linebreak
set modifiable
set write
set incsearch hlsearch ignorecase smartcase                         " Search
set magic                                                           " Regular Expression
set linespace=0
set wildmenu
set wildmode=longest,list,full                                      " Completion mode that is used for the character
set noerrorbells novisualbell                                       " Turn off error beep/flash
set t_vb=
set list listchars=tab:\ \ ,trail:·,extends:»,precedes:«,nbsp:·
set cursorline                                                      " Highlight the current line
set guicursor=a:hor1
set guicursor+=i-r-ci-cr-o:hor2-blinkon0
set scrolloff=3                                                     " Scroll settings
set sidescroll=1
set sidescrolloff=5
set imcmdline                                                       " Fix context menu messing
set completeopt=longest,menuone                                     " Supper Tab
set foldenable                                                      " Enable Fold
set foldcolumn=1
set foldexpr=1                                                      " Shown line number after fold
set foldlevel=100                                                   " Not fold while VIM set up
set viewoptions=folds
set backspace=indent,eol,start                                      " Make backspace h, l, etc wrap to
set whichwrap+=<,>,h,l
set go+=a                                                           " Visual selection automatically copied to the clipboard
set hidden                                                          " Switch between buffers with unsaved change
set equalalways
set formatoptions+=rnmMB                                            " Remove the backspace for combine lines (Only for chinese)
set matchpairs+=<:>
set ruler                                                           " Ruler: Show Line and colum number
set showcmd                                                         " Show (partial) command in status line
set laststatus=2                                                    " Set status bar
set statusline=%#User2#%m%r%*\ %F\ %y,%{&fileformat}
set statusline+=%=\ %-{strftime(\"%H:%M\ %d/%m/%Y\")}\ %b[A],0x%B\ %c%V,%l/%L\ %1*--%n%%--%*\ %p%%\ |
if version > 74399
  set cryptmethod=blowfish2
endif

noremap <F1> <ESC>
inoremap <F1> <ESC>a
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
nnoremap n nzzzv
nnoremap N Nzzzv
map <leader>bd :bd<CR>
map <leader>bp :bp<CR>
map <leader>bn :bn<CR>
map <C-k> <C-w>k
map <C-j> <C-w>j
map <C-a> <ESC>^
inoremap <C-a> <ESC>I
cnoremap <C-a> <Home>
map <C-e> <ESC>$
inoremap <C-e> <ESC>A
cnoremap <C-e> <End>
nnoremap Y y$
nnoremap <Del> "_x
xnoremap <Del> "_d
nnoremap <space> za
nnoremap & :&&<CR>
xnoremap & :&&<CR>
vmap s <Plug>VSurround

cnoreabbrev W w
cnoreabbrev W! w!
cnoreabbrev Q q
cnoreabbrev Q! q!
cnoreabbrev X x
cnoreabbrev X! x!
cnoreabbrev XA xa
cnoreabbrev XA! xa!
cnoreabbrev WQ wq
cnoreabbrev WQ! wq!
cnoreabbrev QA qa
cnoreabbrev QA! qa!
cnoreabbrev WA wa
cnoreabbrev WA! wa!
cnoreabbrev NOH noh

inoremap <leader>tt <C-R>=strftime("%d/%m/%y %H:%M:%S")<cr>
inoremap <leader>fn <C-R>=expand("%:t:r")<CR>
inoremap <leader>fe <C-R>=expand("%:t")<CR>
inoremap <leader>w <C-O>:w<CR>
nnoremap <leader>g :%s///gn<CR>

nnoremap <leader>zdb :%s/\s\+$//<CR>
nnoremap <leader>zhs :%s/^\s\+//<CR>
nnoremap <leader>zim :g/^/ s//\=line('.').' '/<CR>
nnoremap <leader>zbl :g/^\s*$/d<CR>
nnoremap <leader>zdm :%s/<C-v><CR>//ge<CR>
nnoremap <leader>zng :%s///gn<CR>
nnoremap <leader>zbd :%s/​//g<CR>
nnoremap <leader>zdd :%s/ / /g<CR>
nnoremap <leader>zds :%s/^<span.*span>//g<CR>
nnoremap <leader>zid i•<ESC>

iabbrev <leader>/* /*********************************
iabbrev <leader>*/ *********************************/
iabbrev <leader>#- #------------------

" ====================================== For Function =====================================
let g:EnhCommentifyAlignRight='Yes'
let g:EnhCommentifyRespectIndent='yes'
let g:EnhCommentifyPretty='Yes'
let g:EnhCommentifyMultiPartBlocks='Yes'
let g:EnhCommentifyUseSyntax='Yes'

map <leader>aid :AuthorInfoDetect<CR>
let g:vimrc_author='Marslo'
let g:vimrc_email='marslo.jiao@gmail.com'
au BufWritePre, FileWritePre * :AuthorInfoDetect<CR>

let MRU_Auto_Close = 1                                              " Most Recently Used(MRU)
let MRU_Max_Entries = 10
let MRU_Exclude_Files='^/tmp/.*\|^/temp/.*\|^/media/.*\|^/mnt/.*'
map <leader>re :MRU<CR>

let g:rainbow_active = 1
let g:rainbow_operators = 1
let g:rainbow_conf = {
\   'guifgs' : ['#6A5ACD', '#B22222', '#C0FF3E', '#EEC900', '#9A32CD', '#EE7600', '#98fb98', '#686868'],
\   'ctermfgs' : 'xterm-256color' == $TERM ? ['141', '196', '112', '208', '129', '166', '85', '237'] : ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta'],
\   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\   'separately': {
\     'css': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'scss': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'html': {
\       'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\     },
\   }
\}

let g:indentLine_enabled = 1
let g:indentLine_color_gui = "#282828"
let g:indentLine_color_term = 239
let g:indentLine_indentLevel = 8
let g:indentLine_showFirstIndentLevel = 0
let g:indentLine_color_tty = 0
let g:indentLine_faster = 1
let g:indentLine_char = '¦'

let SuperTabDefaultCompletionType = '<c-p>'
let SuperTabMappingForward = '<c-p>'
let SuperTabMappingTabLiteral = '<Tab>'
let SuperTabClosePreviewOnPopupClose = 1

let g:AutoPairs = {'(':')', '[':']', '{':'}', '<':'>',"'":"'",'"':'"', '`':'`'}
let g:AutoPairsParens = {'(':')', '[':']', '{':'}', '<':'>'}
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'

set statusline+=%#warningmsg#
set statusline+=\ %{SyntasticStatuslineFlag()}
set statusline+=\ %* |
let g:syntastic_loc_list_height = 2
let g:syntastic_ignore_files = ['\.py$']
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1



augroup vimrc
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END

" set colorcolumn=80
" call matchadd('ColorColumn', '\%81v', 100)
" match OverLength /\%81v.\+/

augroup collumnLimit
  autocmd!
  let collumnLimit = 80
  let pattern = '\%<' . (collumnLimit+1) . 'v.\%>' . collumnLimit . 'v'
  let w:m1=matchadd('CollumnLimit', pattern, -1)
augroup END

" Programming configs for specified scripts
if has("autocmd")
  autocmd FileType robot set tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType groovy set tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType snippet set tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType make set tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType json set tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType sh set tabstop=2 softtabstop=2 shiftwidth=2
  autocmd FileType markdown set tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType javascript syntax clear jsFuncBlock
  autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/

  autocmd BufWinLeave * silent! mkview
  autocmd BufWinEnter * silent! loadview
  autocmd BufRead,BufNewFile * setfiletype txt
  autocmd BufRead,BufNewFile *.t set ft=perl
endif

" vim: tabstop=2:softtabstop=2:shiftwidth=2:expandtab
