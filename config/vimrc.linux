" =============================================================================
"      FileName: .vimrc
"          Desc: Made in Marslo
"        Author: marslo.jiao@gmail.com
"       Created: 2010-10
"       Version: 0.0.25
"    LastChange: 2023-10-13 00:52:26
" =============================================================================

set maxmempattern=5000
set nocompatible
set history=1000
set diffopt=filler,context:3
set spell spelllang=en_us
set spellcapcheck=0
set spellfile=~/.vim/spell/en.utf-8.add
set lazyredraw
runtime macros/matchit.vim
let vimrplugin_i386 = 1
let performance_mode = 1
set fileformat=unix
set nowrap                                                          " no wrap lines
set viminfo=%,<800,'10,/50,:100,h,f0,n~/.vim/cache/.viminfo
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set tags=tags
set tags+=/home/marslo/Study/Codes/Rails/sdt

if empty( glob('~/.vim/cache/') )
  execute 'silent !mkdir -p ~/.vim/cache'
endif
if empty( glob('~/.vim/undo/') )
  execute 'silent !mkdir -p ~/.vim/undo'
endif

let bud=expand( '~/.vim/bundle' ) . '/'

" /**************************************************************
"                                  _
"  _ __  _ __ ___  _ __   ___ _ __| |_ _   _
" | '_ \| '__/ _ \| '_ \ / _ \ '__| __| | | |
" | |_) | | | (_) | |_) |  __/ |  | |_| |_| |
" | .__/|_|  \___/| .__/ \___|_|   \__|\__, |
" |_|             |_|                  |___/
"
" **************************************************************/
let mapleader   = ","
let g:mapleader = ","

" Vim Bundle
filetype off
set rtp+=~/.vim/bundle/snipmate.vim/snippets/
set rtp+=~/.vim/bundle/Vundle.vim/
set rtp+=/usr/local/opt/fzf                                         " $ brew install fzf
call vundle#begin()

Bundle 'VundleVim/Vundle.vim'
" Bundle 'gmarik/vundle.git'
Bundle 'tpope/vim-pathogen'
Bundle 'tpope/vim-surround'
Bundle 'godlygeek/tabular'
Bundle 'tpope/vim-repeat'
Bundle 'Yggdroot/indentLine'
Bundle 'kien/ctrlp.vim'
Bundle 'sjl/gundo.vim'
Bundle 'majutsushi/tagbar'
" Bundle 'dantezhu/authorinfo'
Bundle 'marslo/authorinfo'
Bundle 'marslo/EnhCommentify.vim'
" Bundle 'ervandew/supertab'
Bundle 'marslo/auto-pairs'
Bundle 'tomtom/tlib_vim'
Bundle 'marcweber/vim-addon-mw-utils'
Bundle 'marslo/snipmate.vim'
Bundle 'yegappan/mru'
Bundle 'Conque-Shell'
Bundle 'taglist.vim'
Bundle 'winmanager'
Bundle 'grep.vim'
" Bundle 'kamykn/spelunker.vim'
" syntex check
Bundle 'vim-syntastic/syntastic'
" moving faster
Bundle 'rhysd/accelerated-jk'
" Bundle 'yonchu/accelerated-smooth-scroll'
" Loading my function after vim start (reduce vim start time)
Bundle 'marslo/MarsloFunc'
Bundle 'LargeFile'
Bundle 'Konfekt/FastFold'
Bundle 'L9'
Bundle 'dhruvasagar/vim-table-mode'
Bundle 'Chiel92/vim-autoformat'
Bundle 'rizzatti/dash.vim'
" Bundle 'mhinz/vim-signify'
Bundle 'airblade/vim-gitgutter'
Bundle 'mbbill/undotree'
Bundle 'ycm-core/YouCompleteMe'
Bundle 'ycm-core/lsp-examples'
" Bundle 'wsdjeg/vim-fetch'
Bundle 'rhysd/vim-grammarous'
Bundle 'dpelle/vim-LanguageTool'
" markdown
Bundle 'preservim/vim-markdown'
" Bundle 'gabrielelana/vim-markdown'
" Python
" Bundle 'python-mode/python-mode'
Bundle 'Vimjas/vim-python-pep8-indent'
Bundle 'python_fold'
Bundle 'pyflakes/pyflakes'
Bundle 'python_match.vim'
Bundle 'vim-python/python-syntax'
Bundle 'davidhalter/jedi-vim'
" Bundle 'mfukar/robotframework-vim'
" " ruby
" Bundle 'tpope/vim-rails'
" Bundle 'vim-ruby/vim-ruby'
" Bundle 'nelstrom/vim-textobj-rubyblock'
" Bundle 'kana/vim-textobj-user'
" Bundle 'ruby-matchit'
" " Javascript
" Bundle 'pangloss/vim-javascript'
" Bundle 'jelera/vim-javascript-syntax'
" " AngularJS
" Bundle 'burnettk/vim-angular'
" Web design
Bundle 'valloric/MatchTagAlways'
" Bundle 'jaxbot/browserlink.vim'
" colors and themes and syntax
Bundle '907th/vim-auto-save'
Bundle 'luochen1990/rainbow'
Bundle 'txt.vim'
" Bundle 'ap/vim-css-color'
Bundle 'marslo/vim-coloresque'
Bundle 'marslo/marslo.vim'
Bundle 'marslo/MarsloVimOthers'
Bundle 'altercation/vim-colors-solarized'
Bundle 'morhetz/gruvbox'
" Git
Bundle 'tpope/vim-fugitive'
Bundle 'zivyangll/git-blame.vim'
Bundle 'APZelos/blamer.nvim'
"" Plist
" Bundle "darfink/vim-plist"
" Groovy
Bundle 'modille/groovy.vim'
Bundle 'marslo/Jenkinsfile-vim-syntax'
" dockerfile
Bundle 'ekalinin/Dockerfile.vim'
" yaml
Bundle 'stephpy/vim-yaml'
Bundle 'pedrohdz/vim-yaml-folds'
Bundle 'dense-analysis/ale'
" github page
Bundle 'parkr/vim-jekyll'
" " brew
" Bundle 'xu-cheng/brew.vim'
" " For fun
" Bundle 'TeTrIs.vim'
" Bundle 'matrix.vim--Yang'

call vundle#end()
call pathogen#infect()
filetype plugin indent on
syntax enable on

" /**************************************************************
"   __                  _   _
"  / _|_   _ _ __   ___| |_(_) ___  _ __
" | |_| | | | '_ \ / __| __| |/ _ \| '_ \
" |  _| |_| | | | | (__| |_| | (_) | | | |
" |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|
"
" **************************************************************/
function! GetVundle()                                               " GetVundle() inspired by: http://pastebin.com/embed_iframe.php?i=C9fUE0M3
  let vundleAlreadyExists=1
  if has( 'win32' ) || has( 'win64' )
    let bud=$VIM . '\bundle'
    let vud=bud . '\Vundle.vim'
    let vudcfg=expand(vud . '\.git\config')
  else
    let bud='~/.vim/bundle'
    let vud=bud . '/Vundle.vim'
    let vudcfg=expand(vud . '/.git/config')
  endif

  if filereadable(vudcfg)
    echo "Vundle has existed at " . expand(vud)
  else
    echo "Installing Vundle..."
    echo ""
    if isdirectory(expand(bud)) == 0
      call mkdir(expand(bud), 'p')
    endif
    execute 'silent !git clone https://github.com/VundleVim/Vundle.vim.git "' . expand(vud) . '"'
    let vundleAlreadyExists=0
  endif
endfunction
command! GetVundle :call GetVundle()

function! DoRedraw()
  execute "silent redraw!"
endfunction
nnoremap <C-k> :call DoRedraw()<CR>
map <C-k>      :call DoRedraw()<CR>

if has( 'unix' ) || has( 'macunix' )
  if empty( glob('~/.vim/bundle/Vundle.vim') ) || empty( glob($VIM . '\bundle\Vundle.vim') )
    execute 'silent exec "GetVundle"'
  endif
endif

function! ToggleVerbose()
  if !&verbose
    set verbosefile=~/.log/vim/verbose.log
    set verbose=15
  else
    set verbose=0
    set verbosefile=
  endif
endfunction
command! ToggleVerbose :call ToggleVerbose()

function! ToggleWindowHorizontalVerticalSplit()
  if !exists( 't:splitType' )
    let t:splitType = 'vertical'
  endif

  if t:splitType == 'vertical'                                      " is vertical switch to horizontal
    windo wincmd K
    let t:splitType = 'horizontal'
  else                                                              " is horizontal switch to vertical
    windo wincmd H
    let t:splitType = 'vertical'
  endif
endfunction
nnoremap <silent> <leader>wt :call ToggleWindowHorizontalVerticalSplit()<cr>

" reverse the lines of the whole file or a visually highlighted block.
    " :Rev is a shorter prefix you can use.
    " Adapted from http://tech.groups.yahoo.com/group/vim/message/34305
    " reference : https://superuser.com/a/387869/112396
command! -nargs=0 -bar -range=% Reverse
    \       let save_mark_t = getpos("'t")
    \<bar>      <line2>kt
    \<bar>      exe "<line1>,<line2>g/^/m't"
    \<bar>  call setpos("'t", save_mark_t)
nnoremap <Leader>r :Reverse<CR>
xnoremap <Leader>r :Reverse<CR>

function! GetFiletypes()
  " https://vi.stackexchange.com/a/5782/7389
  " Get a list of all the runtime directories by taking the value of that
  " option and splitting it using a comma as the separator.
  let rtps      = split( &runtimepath, "," )
  " This will be the list of filetypes that the function returns
  let filetypes = []

  " Loop through each individual item in the list of runtime paths
  for rtp in rtps
    let syntax_dir = rtp . "/syntax"
    " Check to see if there is a syntax directory in this runtimepath.
    if ( isdirectory(syntax_dir) )
      " Loop through each vimscript file in the syntax directory
      for syntax_file in split( glob(syntax_dir . "/*.vim"), "\n" )
        " Add this file to the filetypes list with its everything
        " except its name removed.
        call add( filetypes, fnamemodify(syntax_file, ":t:r") )
      endfor
    endif
  endfor

  " This removes any duplicates and returns the resulting list.
  " NOTE: This might not be the best way to do this, suggestions are welcome.
  return uniq( sort(filetypes) )
endfunction

if isdirectory( expand(bud . 'MarsloFunc') )
  command! GetVim :call marslofunc#GetVim()<CR>
  command! Cyg    :call marslofunc#OpenCygwin()
  nnoremap cyg    :call marslofunc#OpenCygwin()<CR>
  nnoremap cmd    :call marslofunc#OpenCMD()<CR>
  nnoremap gf     :call marslofunc#GotoFile()<CR>
  xnoremap *      :<C-u>call marslofunc#VSetSearch()<CR>/<C-R>=@/<CR><CR>
  xnoremap #      :<C-u>call marslofunc#VSetSearch()<CR>?<C-R>=@/<CR><CR>
  noremap  <M-o>  :call marslofunc#OpenFoler()<CR>
  nnoremap <F12>  :call marslofunc#UpdateTags()<CR>
  nnoremap <C-F5> :call marslofunc#RunResult()<CR>
  nnoremap <leader>ti :call marslofunc#callit()<CR>

  augroup resCur
    autocmd!
      autocmd BufWinEnter * call marslofunc#ResCur()
  augroup END

  " command! DiffSaved :call marslofunc#DiffWithSaved()<CR>
  " nnoremap <leader>df :call marslofunc#DiffWithSaved()<CR>

  set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\*\\\|\\*/\\\|{{{\\d\\=','','g')
  set foldtext=marslofund#MyFoldText()<CR>
endif

" twiddle case : https://vim.fandom.com/wiki/Switching_case_of_characters#Twiddle_case
function! TwiddleCase(str)
  if a:str ==# toupper( a:str )
    let result = tolower( a:str )
  elseif a:str ==# tolower( a:str )
    let result = substitute( a:str,'\(\<\w\+\>\)', '\u\1', 'g' )
  else
    let result = toupper( a:str )
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv

" spell
" set spellcamelcase=1
" ignore CamelCase words when spell checking
function! IgnoreSpells()
  syntax match Url "\w\+:\/\/[:/?#[\]@!$&'()*+,;=0-9[:lower:][:upper:]_\-.~]\+" contains=@NoSpell containedin=@AllSpell transparent
  syntax match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell transparent
  syntax match CamelCase /\<[A-Z][a-z]\+[A-Z].\{-}\>/ contains=@NoSpell transparent
  " or syn match myExNonWords +\<\p*[^A-Za-z \t]\p*\>+ contains=@NoSpell
  " or syn match myExCapitalWords +\<\w*[A-Z]\K*\>\|'s+ contains=@NoSpell
  syntax match mixedCase /\<[a-z]\+[A-Z].\{-}\>/ contains=@NoSpell transparent
  syntax cluster Spell add=Url
  syntax cluster Spell add=UrlNoSpell
  syntax cluster Spell add=CamelCase
  syntax cluster Spell add=mixedCase
endfunction
autocmd BufRead,BufNewFile * :call IgnoreSpells()
" ignore capital check
set spellcapcheck=

" redir into new tab: https://vim.fandom.com/wiki/Capture_ex_command_outputhttps://vim.fandom.com/wiki/Capture_ex_command_output
" `gt`, `:tabfirst`, `:tabnext`, `:tablast` ... to switch tabs : https://vim.fandom.com/wiki/Alternative_tab_navigation
function! TabMessage(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    tabnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)

" switch avoid quickfix : https://vi.stackexchange.com/a/19420/7389
function! BSkipQuickFix(command)
  let start_buffer = bufnr('%')
  execute a:command
  while &buftype ==# 'quickfix' && bufnr('%') != start_buffer
    execute a:command
  endwhile
endfunction

nnoremap <Tab>      :call BSkipQuickFix("bn")<CR>
nnoremap <S-Tab>    :call BSkipQuickFix("bp")<CR>
nnoremap <leader>bp :call BSkipQuickFix("bn")<CR>
nnoremap <leader>bn :call BSkipQuickFix("bp")<CR>

" spell
" set spellcamelcase=1
" Ignore CamelCase words when spell checking
fun! IgnoreCamelCaseSpell()
  syn match CamelCase /\<[A-Z][a-z]\+[A-Z].\{-}\>/ contains=@NoSpell transparent
  syn match mixedCase /\<[a-z]\+[A-Z].\{-}\>/ contains=@NoSpell transparent
  syn cluster Spell add=CamelCase
  syn cluster Spell add=mixedCase
endfun
autocmd BufRead,BufNewFile * :call IgnoreCamelCaseSpell()
syn match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell

function! TriggerYCM()
  if g:loaded_youcompleteme == 1
    let g:loaded_youcompleteme = 0
  else
    let g:loaded_youcompleteme = 1
  endif
endfunction
nnoremap <C-y> :call TriggerYCM()<CR>

command! -nargs=0 Toc execute 'silent ! /usr/local/bin/doctoc --github --maxlevel 3 %' | execute 'redraw!'
command! -nargs=1 -range TabFirst exec <line1> . ',' . <line2> . 'Tabularsze /^[^' . escape(<q-args>, '\^$.[?*~') . ']*\zs' . escape(<q-args>, '\^$.[?*~')

" /**************************************************************
"                                                      _
"  _ __  _ __ ___   __ _ _ __ __ _ _ __ ___  _ __ ___ (_)_ __   __ _
" | '_ \| '__/ _ \ / _` | '__/ _` | '_ ` _ \| '_ ` _ \| | '_ \ / _` |
" | |_) | | | (_) | (_| | | | (_| | | | | | | | | | | | | | | | (_| |
" | .__/|_|  \___/ \__, |_|  \__,_|_| |_| |_|_| |_| |_|_|_| |_|\__, |
" |_|              |___/                                       |___/
"
" **************************************************************/

" programming configs for ruby and rails
let g:ruby_path=$RUBY_BIN
if has("autocmd")
  autocmd FileType ruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby let g:rubycomplete_buffer_loading=1
  autocmd FileType ruby let g:rubycomplete_classes_in_global=1
  augroup filetypedetect                                            " Inspired from :h new-filetype
    au BufNewFile,BufRead *.r.erb set filetype=r.ruby
  augroup end
  autocmd FileType ruby compiler ruby
endif
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

" Programming configs for Python
" let &pythonthreehome="/usr/local/bin/python3.6"
" set pythonthreedll="/usr/lib64/libpython3.6m.so.1.0"
if has( "autocmd" )
  autocmd FileType python syn keyword pythonDecorator print self
  autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileTYpe python set isk-=.
  " set textwidth=80
endif
let python_highlight_all = 1                                        " syntax-python

" python-mode configurations
if isdirectory( expand(bud . 'python-mode') ) || has('python3')
  nnoremap <leader>p :PymodeLint<CR>                                " trigger pymodelint by manual
  let g:pymode_python                     = '/usr/local/bin/python3'
  let g:pymode                            = 1                       " 1: turn on python-mode plugin
  let g:pymode_syntax_all                 = 1
  let g:pymode_warnings                   = 0                       " turn off plugin's warnings
  let g:pymode_folding                    = 1
  let g:pymode_options_colorcolumn        = 1
  let g:pymode_trim_whitespaces           = 1                       " trim unused white spaces on save
  let g:pymode_lint                       = 1                       " turn on code checking
  let g:pymode_lint_checkers              = ['pyflakes', 'pep8', 'mccabe']
  let g:pymode_lint_ignore                = "E111,E114,E501,W0611,E266" " E501: long line; E111&E114: 4 spaces indent; E266: too many # for comments
  let g:pymode_options                    = 0
  let g:pymode_rope                       = 0
  let g:pymode_indent                     = 0
  let g:pymode_syntax_highlight_self      = g:pymode_syntax_all
  let g:pymode_quickfix_minheight         = 3
  let g:pymode_quickfix_maxheight         = 3
  let g:python_check_syntax               = 0                       " disable check python script syntax on every save
  let g:pymode_lint_on_write              = 0                       " disable on save checking
  " let g:pymode_rope_regenerate_on_write = 0
  let g:pymode_lint_unmodified            = 1
  let g:pymode_indent                     = 1
endif

" /**************************************************************
"  _       _             __                     __  _   _
" (_)_ __ | |_ ___ _ __ / _| __ _  ___ ___     / / | |_| |__   ___ _ __ ___   ___
" | | '_ \| __/ _ \ '__| |_ / _` |/ __/ _ \   / /  | __| '_ \ / _ \ '_ ` _ \ / _ \
" | | | | | ||  __/ |  |  _| (_| | (_|  __/  / /   | |_| | | |  __/ | | | | |  __/
" |_|_| |_|\__\___|_|  |_|  \__,_|\___\___| /_/     \__|_| |_|\___|_| |_| |_|\___|
"
" **************************************************************/
if has('gui_running')
  set go=                                                           " hide everything (go = guioptions)
  set cpoptions+=n
  set guifont=Ubuntu\ Mono:h26
  " set guifontwide=NSimsun:h16
  set lines=34                                                      " the initialize size
  set columns=118
endif

if exists('$TMUX')
  set term=screen-256color
endif

if 'xterm-256color' == $TERM
  set t_Co=256
endif

if has( 'gui_running' ) || 'xterm-256color' == $TERM
  set background=dark
  let psc_style='cool'

  " colorscheme marslo                                              " marslo
  colorscheme gruvbox                                               " gruvbox

  """ terminal : `:help terminal-info`
  set term=xterm
  let &t_AB="\e[48;5;%dm"
  let &t_AF="\e[38;5;%dm"
  let &t_Co=256
  set t_Co=256
  "" italic
  " let &t_ZH="\e[3m"
  " let &t_ZR="\e[23m"
  "" cursor shape
  " if $TERM_PROGRAM =~ "iTerm"
  "   let &t_SI = "\<Esc>]50;CursorShape=1\x7"                      " Vertical bar in insert mode
  "   let &t_EI = "\<Esc>]50;CursorShape=0\x7"                      " Block in normal mode
  " endif
  let &t_SI.="\e[4 q"                                               " SI = INSERT mode
  let &t_SR.="\e[4 q"                                               " SR = REPLACE mode
  let &t_EI.="\e[3 q"                                               " EI = NORMAL mode (ELSE)

  """ solarized
  " colorscheme solarized
  " set termguicolors
  " let g:solarized_termcolors=256
  " let &t_8f = "\<esc>[38;2;%lu;%lu;%lum"
  " let &t_8b = "\<esc>[48;2;%lu;%lu;%lum"
  " let g:solarized_termtrans = 1
  " let g:solarized_extra_hi_groups = 1
  " let g:solarized_visibility = "high"
  " let g:solarized_contrast = "high"
  " let s:base03 = "255"
else
  set t_Co=8
  set t_Sb=^[[4%dm
  set t_Sf=^[[3%dm
  colorscheme marslo16
endif

" /**************************************************************
"           _   _   _
"  ___  ___| |_| |_(_)_ __   __ _
" / __|/ _ \ __| __| | '_ \ / _` |
" \__ \  __/ |_| |_| | | | | (_| |
" |___/\___|\__|\__|_|_| |_|\__, |
"                           |___/
"
" **************************************************************/
set ttimeout
set ttimeoutlen=1
set ttyfast                                                         " enable fast terminal connection.
set clipboard+=unnamed                                              " copy the content to system clipboard by using y/p
set clipboard+=unnamedplus
set iskeyword-=.
set autochdir
set fileencodings=utf-8,latin1,ucs-bom,gbk,cp936,gb2312,gb18030     " code format
set termencoding=utf-8
set encoding=utf-8                                                  " input chinese (=cp936)
set fileencoding=utf-8
let &termencoding=&encoding
set selection=exclusive                                             " mouse settings
set selectmode=mouse,key
set nobackup noswapfile nowritebackup noundofile noendofline nobuflisted
set number                                                          " number: line number
set report=0
set autoread                                                        " set auto read when a file is changed by outside
set showmatch                                                       " show matching bracets (shortly jump to the other bracets)
set matchtime=1                                                     " the shortly time
set tabstop=2                                                       " tab width
set softtabstop=2                                                   " width for backspace
set shiftwidth=2                                                    " the tab width by using >> & <<
set autoindent smartindent expandtab
set cindent
set cinoptions=(0,u0,U0
set smarttab                                                        " smarttab: the width of <Tab> in first line would refer to 'shiftwidth' parameter
set linebreak
set modifiable
set write
set incsearch hlsearch ignorecase smartcase                         " search
set magic                                                           " regular expression
set linespace=0
set wildmenu
set wildmode=longest,list,full                                      " completion mode that is used for the character
set noerrorbells novisualbell visualbell                            " ╮ Turn off
set t_vb=                                                           " ╯ error beep/flash
" set list listchars=tab:\→\ ,tab:▸,trail:·,extends:»,precedes:«,nbsp:·,eol:¬
set list
set listchars=tab:\→\ ,trail:·,extends:»,precedes:«,nbsp:·
set cursorline                                                      " highlight the current line
set cursorcolumn
set guicursor=a:hor10-Cursor-blinkon0
set guicursor+=i-r-c-ci-cr-o:hor10-iCursor-blinkon0
set guicursor+=n:hor10-Cursor-blinkwait700-blinkon400-blinkoff250
set guicursor+=v-ve:block-Cursor
set virtualedit=onemore                                             " allow for cursor beyond last character
set scrolloff=3                                                     " scroll settings
set sidescroll=1
set sidescrolloff=5
set imcmdline                                                       " fix context menu messing
set complete+=kspell
set completeopt=longest,menuone                                     " supper tab
set foldenable                                                      " enable fold
set foldcolumn=1
set foldexpr=1                                                      " shown line number after fold
set foldlevel=100                                                   " not fold while vim set up
set shortmess+=filmnrxoOtTc                                         " abbrev. of messages (avoids 'hit enter')
set viewoptions=folds
set backspace=indent,eol,start                                      " make backspace h, l, etc wrap to
set whichwrap+=<,>,h,l
set go+=a                                                           " visual selection automatically copied to the clipboard
set hidden                                                          " switch between buffers with unsaved change
set equalalways
set formatoptions=tcrqn
set formatoptions+=rnmMB                                            " remove the backspace for combine lines (only for chinese)
set matchpairs+=<:>
" set autowrite
if has('cmdline_info')
  set ruler                                                         " ruler: show line and column number
  set showcmd                                                       " show (partial) command in status line
endif
if has('statusline')
  set laststatus=2                                                  " set status bar
  set statusline=%#User2#%m%r%*\ %F\ %y,%{&fileformat}
  " set statusline+=\ %{fugitive#statusline()}
  set statusline+=%=\ %-{strftime(\"%H:%M\ %d/%m/%Y\")}\ %b[A],0x%B\ %c%V,%l/%L\ %1*--%n%%--%*\ %p%%\ |
endif
" set synmaxcol=128
" set binary
set exrc
set secure

if has('persistent_undo')
  set noundofile
endif
if version > 74399
  set cryptmethod=blowfish2
endif


" /**************************************************************
"      _                _             _
"  ___| |__   ___  _ __| |_ ___ _   _| |_
" / __| '_ \ / _ \| '__| __/ __| | | | __|
" \__ \ | | | (_) | |  | || (__| |_| | |_
" |___/_| |_|\___/|_|   \__\___|\__,_|\__|
"
" **************************************************************/
noremap <leader>v :e ~/.vimrc<CR>
noremap <F1> <ESC>
inoremap <F1> <ESC>a
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <leader>bd :bd<CR>
" nnoremap <C-k> <C-w>k                                             " conflict with redraw shortcut : https://vimhelp.org/various.txt.html#CTRL-L
nnoremap <C-j> <C-w>j
" nnoremap <C-l> <C-w>l                                             " conflict with redraw shortcut : https://vimhelp.org/various.txt.html#CTRL-L
nnoremap <C-h> <C-w>h
nnoremap <C-a> <ESC>^
inoremap <C-a> <ESC>I
cnoremap <C-a> <Home>
nnoremap <C-e> <ESC>$
inoremap <C-e> <ESC>A
cnoremap <C-e> <End>
nnoremap Y y$
nnoremap <Del> "_x
xnoremap <Del> "_d
" nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
nnoremap <space> za
nnoremap & :&&<CR>
xnoremap & :&&<CR>
vnoremap s <Plug>VSurround
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

cnoreabbrev W w
cnoreabbrev W! w!
cnoreabbrev Q q
cnoreabbrev Q! q!
cnoreabbrev X x
cnoreabbrev X! x!
cnoreabbrev XA xa
cnoreabbrev XA! xa!
cnoreabbrev WQ wq
cnoreabbrev WQ! wq!
cnoreabbrev QA qa
cnoreabbrev QA! qa!
cnoreabbrev WA wa
cnoreabbrev WA! wa!
cnoreabbrev NOH noh
cnoreabbrev Noh noh
cnoreabbrev %Y %y
cnoreabbrev %D %d
cnoremap sudow!! w !sudo tee > /dev/null %
cnoremap sw!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!
" cnoremap lss lss<cr>:b<space>
" cnoremap lsd lss<cr>:bd<space>
" cnoremap redr redraw!

inoremap <leader>tt <C-R>=strftime("%d/%m/%y %H:%M:%S")<cr>
inoremap <leader>fn <C-R>=expand("%:t:r")<CR>
inoremap <leader>fe <C-R>=expand("%:t")<CR>
inoremap <leader>w <C-O>:w<CR>
nnoremap <leader>G :%s///gn<CR>
"make < > shifts keep selection
" vnoremap < <gv
" vnoremap > >gv
nnoremap <leader>idl :IndentLineEnable<CR>

nnoremap <leader>zil :g/^/ s//\=line('.').' '/<CR>                  " [i]nsert [l]ine number
nnoremap <leader>zcm :%s/<C-v><CR>/\r/g<CR>                         " [c]onvert [m] to new line
nnoremap <leader>zdm :%s/<C-v><CR>//ge<CR>                          " [d]elete [m]()
nnoremap <leader>zdb :%s/\s\+$//<CR>                                " [d]elete trailing space ( [b]lank )
nnoremap <leader>zbl :g/^\s*$/d<CR>                                 " [d]elete [b]lank [l]ine
nnoremap <leader>zd2 :%s/​//g<CR>                              " [d]elete <200b>
nnoremap <leader>zdd :%s/ / /g<CR>                                  " [d]elete [d]ot(• )
nnoremap <leader>zds :%s/^<span.*span>//g<CR>                       " [d]elete [s]pan tag
nnoremap <leader>zdi :%s/^\s\+//<CR>                                " [d]elete [i]ndent spaces
nnoremap <leader>zid i•<ESC>                                        " [i]nsert [d]ot(•)
" cacular expr
nnoremap <leader>cr 0yt=a<c-r>=<c-r>"<cr><esc>
" cacular expr
nnoremap <leader>* *<C-O>:%s///gn<CR>
" cacular the matches numbers ( [w]c -[l] )
nnoremap <leader>zwl :%s///gn<CR>

" https://vim.fandom.com/wiki/Capitalize_words_and_regions_easily
if ( &tildeop )
  nnoremap gcw  guw~l
  nnoremap gcW  guW~l
  nnoremap gciw guiw~l
  nnoremap gciW guiW~l
  nnoremap gcis guis~l
  nnoremap gc$  gu$~l
  nnoremap gcgc guu~l
  nnoremap gcc  guu~l
  vnoremap gc   gu~l
else
  nnoremap gcw  guw~h
  nnoremap gcW  guW~h
  nnoremap gciw guiw~h
  nnoremap gciW guiW~h
  nnoremap gcis guis~h
  nnoremap gc$  gu$~h
  nnoremap gcgc guu~h
  nnoremap gcc  guu~h
  vnoremap gc   gu~h
endif
nnoremap gcc :s/\v<(.)(\w*)/\u\1\L\2/g<CR>
nnoremap gcgc gcc

iabbrev <leader>/* /*********************************
iabbrev <leader>*/ *********************************/
iabbrev <leader>#- #------------------

" /**************************************************************
"        _             _                  _   _   _
"  _ __ | |_   _  __ _(_)_ __    ___  ___| |_| |_(_)_ __   __ _ ___
" | '_ \| | | | |/ _` | | '_ \  / __|/ _ \ __| __| | '_ \ / _` / __|
" | |_) | | |_| | (_| | | | | | \__ \  __/ |_| |_| | | | | (_| \__ \
" | .__/|_|\__,_|\__, |_|_| |_| |___/\___|\__|\__|_|_| |_|\__, |___/
" |_|            |___/                                    |___/
"
" **************************************************************/
let g:auto_save                 = 0                                 " enable AutoSave on Vim startup

let g:ctrlp_map                 = '<c-p>'                           " CtrlP
let g:ctrlp_working_path_mode   = 'ra'                              " search parents as well (stop searching safety)
let g:ctrlp_max_height          = 8
let g:ctrlp_max_depth           = 100
let g:ctrl_root_makers          = ['.ctrlp']                        " stop search if these files present
let g:ctrlp_use_caching         = 1
let g:ctrlp_clear_cache_on_exit = 0                                 " cross session caching
if has('win32') || has('win95') || has('win64')
  let g:ctrlp_cache_dir = $VIM . '/cache/ctrlp'
else
  let g:ctrlp_cache_dir = '$HOME/.vim/cache/ctrlp'
endif
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|rpm|tar|gz|bz2|zip|ctags|tags)|tags|ctags$',
    \ 'link': 'some_bad_symbolic_links',
    \ }

nmap <leader>tv :ConqueTermSplit bash <CR>

nmap <leader>mm :WMToggle<cr>
let g:winManagerWidth = 20
let g:winManagerWindowLayout='FileExplorer|TagList'

nmap <leader>tl :TlistToggle<CR>
let Tlist_Show_One_File           = 1
let Tlist_Exit_OnlyWindow         = 1
let Tlist_Use_SingleClick         = 1
let Tlist_File_Fold_Auto_Close    = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_show_Menu               = 1
let Tlist_sql_settings            = 'sql;P:package;t:table'
let Tlist_Process_File_Always     = 0

map <leader>ta :TagbarToggle<CR>
let g:tagbar_left             = 1
let g:tagbar_width            = 20
let g:tagbar_autofocus        = 1
let g:tagbar_expand           = 1
let g:tagbar_singleclick      = 1
let g:tagbar_iconchars        = ['+', '-']
let g:tagbar_autoshowtag      = 1
let g:tagbar_show_linenumbers = 0

let g:EnhCommentifyAlignRight      = 'Yes'
let g:EnhCommentifyRespectIndent   = 'yes'
let g:EnhCommentifyPretty          = 'Yes'
let g:EnhCommentifyMultiPartBlocks = 'Yes'
let g:EnhCommentifyUseSyntax       = 'Yes'

noremap <leader>aid :AuthorInfoDetect<CR>
let g:vimrc_author = 'marslo'
let g:vimrc_email  = 'marslo.jiao@gmail.com'
autocmd BufWritePre, FileWritePre * :AuthorInfoDetect<CR>

noremap <leader>re :MRU<CR>
let MRU_Auto_Close    = 1                                           " most recently used(mru)
let MRU_Max_Entries   = 10
let MRU_Exclude_Files = '^/tmp/.*\|^/temp/.*\|^/media/.*\|^/mnt/.*'

noremap <Leader>u :GundoToggle<CR>
set undodir=~/.vim/undo/
set undofile

" for i in '9' '69' '99' '141' '196' '112' '208' '129' '166' '85'; do echo -e "\e[38;05;${i}m${i}"; done | column -c 250 -s ' '; echo -e "\e[m"
let g:rainbow_active = 1
let g:rainbow_operators = 1
let g:rainbow_conf = {
\   'guifgs' : ['#DC322F', '#268bd2', '#6c71c4', '#B22222', '#C0FF3E', '#6A5ACD', '#EEC900', '#9A32CD', '#EE7600', '#98fb98'],
\   'ctermfgs' : 'xterm-256color' == $TERM ? ['9', '69', '178', '196', '112', '208', '129', '166', '84', '99'] : ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta'],
\   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\   'separately': {
\     '*': {},
\     'markdown': {
\       'parentheses_options': 'containedin=markdownCode contained',
\     },
\     'css': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'scss': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'html': {
\       'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\     },
\     'stylus': {
\       'parentheses': ['start=/{/ end=/}/ fold contains=@colorableGroup'],
\     }
\   }
\}

let g:indentLine_enabled              = 1
let g:indentLine_color_gui            = "#282828"
let g:indentLine_color_term           = 239
let g:indentLine_indentLevel          = 20
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_color_tty            = 0
let g:indentLine_faster               = 1
let g:indentLine_concealcursor        = 'inc'
let g:indentLine_conceallevel         = 2
if has( 'gui_running' ) || 'xterm-256color' == $TERM
  let g:indentLine_char           = '¦'
elseif has( 'win32' )
  let g:indentLine_color_term     = 8
  let g:indentLine_char           = '|'
else
  let g:indentLine_color_tty_dark = 0
  let g:indentLine_char           = '¦'
endif

let g:AutoPairs        = {'(':')', '[':']', '{':'}', '<':'>',"'":"'",'"':'"', '`':'`'}
let g:AutoPairsParens  = {'(':')', '[':']', '{':'}', '<':'>'}
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'

" configure syntastic syntax checking to check on open as well as save
set statusline+=%#warningmsg#
set statusline+=\ %{SyntasticStatuslineFlag()}
set statusline+=\ %* |
let g:syntastic_always_populate_loc_list  = 1
let g:syntastic_auto_loc_list             = 1
let g:syntastic_check_on_open             = 1
let g:syntastic_check_on_wq               = 1
let g:syntastic_loc_list_height           = 2
let g:syntastic_ignore_files              = ['\.py$']
let g:syntastic_check_on_wq               = 0
let g:syntastic_check_on_open             = 1
let g:syntastic_html_tidy_ignore_errors   = [" proprietary attribute \"ng-"]
let g:syntastic_always_populate_loc_list  = 1
let g:syntastic_auto_loc_list             = 1

" gabrielelana/vim-markdown
" nnoremap <Leader>cc :let &cole=(&cole == 2) ? 0 : 2 <bar> echo 'conceallevel ' . &cole <CR>
" let g:vim_markdown_folding_style_pythonic = 1
" let g:vim_markdown_override_foldtext      = 0
" let g:vim_markdown_autowrite              = 1
" let g:vim_markdown_new_list_item_indent   = 4
" let g:vim_markdown_toc_autofit            = 1
" let g:vim_markdown_conceal                = 0
"" set conceallevel                         = 2
" let g:vim_markdown_frontmatter            = 1
" let g:vim_markdown_json_frontmatter       = 1
" let g:markdown_enable_spell_checking      = 0
" let g:markdown_enable_input_abbreviations = 0
" let g:markdown_enable_conceal             = 0
" hi markdownItalic           guifg=gray25    gui=underline
" hi MarkdownHeadingDelimiter gui=bold        guifg=gray25
" hi htmlSpecialChar          guifg=black
" hi markdownBold             gui=bold        guifg=gray25
" hi markdownUrl              guifg=#2fb3a6
" hi markdownAutomaticLink    guifg=#2fb3a6
" hi markdownLinkText         guifg=#317849
" hi markdownUrlTitle         guifg=#317849
" hi markdownBlockquote       guifg=#317849   gui=bold
" hi markdownId               guifg=#2fb3a6
" hi markdownIdDeclaration    guifg=#317849   gui=bold
" hi markdownListMarker       guifg=#317849

" for tpope vim-markdown
" let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
" let g:markdown_syntax_conceal = 0
" let g:markdown_minlines = 100

" preservim/vim-markdown
let g:vim_markdown_toc_autofit         = 1
let g:vim_markdown_conceal             = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_strikethrough       = 1
let g:vim_markdown_folding_disabled    = 1
" let g:vim_markdown_frontmatter         = 1
" let g:vim_markdown_json_frontmatter    = 1
" let g:vim_markdown_autowrite           = 1
" let g:vim_markdown_follow_anchor       = 1
" let g:vim_markdown_anchorexpr          = "'<<'.v:anchor.'>>'"

noremap <Leader>tm :TableModeToggle<CR>
let g:table_mode_corner          = '|'
let g:table_mode_header_fillchar = '-'
let g:table_mode_align_char      = ":"
let g:table_mode_corner          = "|"
let g:table_mode_align_char      = ":"
" let g:table_mode_corner_corner = '+'

" function! s:isAtStartOfLine(mapping)
"   let text_before_cursor = getline('.')[0 : col('.')-1]
"   let mapping_pattern = '\V' . escape(a:mapping, '\')
"   let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
"   return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
" endfunction
" inoreabbrev <expr> <bar><bar>
"           \ <SID>isAtStartOfLine('\|\|') ?
"           \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
" inoreabbrev <expr> __
"           \ <SID>isAtStartOfLine('__') ?
"           \ '<c-o>:silent! TableModeDisable<cr>' : '__'
" let g:tabular_loaded = 1

if exists( ":Tabularize" )
  noremap  <Leader>a= :Tabularize /=<CR>
  vnoremap <Leader>a= :Tabularize /=<CR>
  noremap  <leader>a: :Tabularize /:\zs<CR>
  vnoremap <leader>a: :Tabularize /:\zs<CR>
  inoremap <silent> <Bar>   <Bar><Esc>:call <SID>table_auto_align()<CR>
  function! s:table_auto_align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists( ':Tabularize' ) && getline('.') =~# '^\s*|'
      \ && (getline(line('.')-1) =~# p || getline( line('.')+1 ) =~# p)
      let column   = strlen( substitute(getline('.')[0:col('.')],'[^|]','','g') )
      let position = strlen( matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*') )
      Tabularize/|/l1
      normal! 0
      call search( repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.') )
    endif
  endfunction
  " command! -nargs=1 First exec 'Tabularize /^[^' . escape(<q-args>, '\^$.[?*~') . ']*\zs' . escape(<q-args>, '\^$.[?*~')
endif

" git
nnoremap <leader>mp  :! git mp<CR>
nnoremap <Leader>ebb :<C-u>call gitblame#echo()<CR>
nnoremap <Leader>bb  :BlamerToggle<CR>                               " APZelos/blamer.nvim
let g:blamer_enabled              = 0
let g:blamer_delay                = 100
let g:blamer_show_in_visual_modes = 0
let g:blamer_show_in_insert_modes = 0
let g:blamer_relative_time        = 1
" let g:blamer_prefix             = ' » '

" fugitive
" nnoremap <Leader>ga :Git add %:p<CR><CR>
" nnoremap <Leader>gs :Gstatus<CR>
" nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
" nnoremap <leader>gp :Ggrep<Space>
" nnoremap <leader>gb :Git branch<Space>
" nnoremap <leader>go :Git checkout<Space>
" nnoremap <leader>gc :Git commit -am ""<Left>
" command! -bar -nargs=* Gpull execute 'Git pull'
" command! -bar -nargs=* Gpush execute 'Git push'

" gitgutter
nnoremap <leader>d :GitGutterFold<CR>
let g:gitgutter_git_executable = '/usr/local/bin/git'
let g:gitgutter_enabled        = 1
let g:gitgutter_realtime       = 0
let g:gitgutter_eager          = 0
set updatetime=250
set signcolumn=yes
" highlight clear LineNr
highlight clear SignColumn

" Snippet
imap <S-C-J> <Plug>snipMateNextOrTrigger
smap <S-C-J> <Plug>snipMateNextOrTrigger
imap <Tab> <Plug>snipMateNextOrTrigger

" match VendorPrefix /-\(moz\|webkit\|o\|ms\)-[a-zA-Z-]\+/            " For css3
let g:plist_display_format       = 'xml'
let g:plist_json_filetype        = 'javascript'

let g:signify_disable_by_default = 0
let g:signify_vcs_list           = [ 'git' ]

" tabnine-vim                                                        " Bundle 'codota/tabnine-vim'
" if index(['vim'], &filetype) == -1 | let g:loaded_youcompleteme = 1 | endif
" if !( &filetype == 'vim' ) | let g:loaded_youcompleteme = 1 | endif

" ycm
" let g:ycm_key_invoke_completion='<C-S-Space>'
nnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd     :YcmDiags<CR>
set completeopt-=preview
let b:ycm_largefile                               = 1
let g:ycm_cache_omnifunc                          = 0
let g:ycm_confirm_extra_conf                      = 0
let g:ycm_python_binary_path                      = '/usr/local/opt/python/libexec/bin/python'
let g:ycm_extra_conf_globlist                     = [ '~/dev/*','!~/*' ]
let g:ycm_complete_in_comments                    = 1
let g:ycm_server_keep_logfiles                    = 1
let g:ycm_key_invoke_completion                   = '<C-\>'
let g:ycm_global_ycm_extra_conf                   = '~/.marslo/.ycm/global_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax            = 1
let g:ycm_always_populate_location_list           = 1
let g:ycm_min_num_of_chars_for_completion         = 1
let g:ycm_disable_for_files_larger_than_kb        = 1000
let g:ycm_collect_identifiers_from_tags_files     = 1
let g:ycm_filetype_specific_completion_to_disable = { 'gitcommit': 1, 'vim': 1 }
let g:ycm_semantic_triggers =  {
  \   'c': ['->', '.'],
  \   'objc': ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \            're!\[.*\]\s'],
  \   'ocaml': ['.', '#'],
  \   'cpp,cuda,objcpp': ['->', '.', '::'],
  \   'perl': ['->'],
  \   'php': ['->', '::'],
  \   'cs,d,elixir,go,groovy,java,javascript,julia,perl6,python,scala,typescript,vb': ['.'],
  \   'ruby,rust': ['.', '::'],
  \   'lua': ['.', ':'],
  \   'erlang': [':'],
  \ }

"""" ycm for python
let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path         = []
let g:ycm_extra_conf_vim_data     = [ 'g:ycm_python_interpreter_path', 'g:ycm_python_sys_path' ]

""" ycm lsp
let g:ycm_lsp_dir          = '/Users/marslo/.vim/bundle/lsp-examples'
let s:pip_os_dir           = 'bin'
if has('win32')
  let s:pip_os_dir         = 'Scripts'
end
let g:ycm_language_server  = []
let g:ycm_language_server += [
  \   { 'name': 'docker',
  \     'filetypes': [ 'dockerfile' ],
  \     'cmdline': [ expand( g:ycm_lsp_dir . '/docker/node_modules/.bin/docker-langserver' ), '--stdio' ]
  \   },
  \ ]
let g:ycm_language_server += [
  \   {
  \     'name': 'cmake',
  \     'cmdline': [ expand( g:ycm_lsp_dir . '/cmake/venv/' . s:pip_os_dir . '/cmake-language-server' )],
  \     'filetypes': [ 'cmake' ],
  \    },
  \ ]
let g:ycm_language_server += [
  \   {
  \     'name': 'python',
  \     'cmdline': [ 'node', expand( g:ycm_lsp_dir . '/python/node_modules/.bin/pyright-langserver' ), '--stdio' ],
  \     'filetypes': [ 'python' ],
  \   },
  \ ]
let g:ycm_language_server += [
  \   { 'name': 'vim',
  \     'filetypes': [ 'vim' ],
  \     'cmdline': [ expand( g:ycm_lsp_dir . '/viml/node_modules/.bin/vim-language-server' ), '--stdio' ]
  \   },
  \ ]
let g:ycm_language_server += [
  \   {
  \     'name': 'bash',
  \     'cmdline': [ 'node', expand( g:ycm_lsp_dir . '/bash/node_modules/.bin/bash-language-server' ), 'start' ],
  \     'filetypes': [ 'sh', 'bash' ],
  \   },
  \ ]
let g:ycm_language_server += [
  \   {
  \     'name': 'json',
  \     'cmdline': [ 'node', expand( g:ycm_lsp_dir . '/json/node_modules/.bin/vscode-json-languageserver' ), '--stdio' ],
  \     'filetypes': [ 'json' ],
  \     'capabilities': { 'textDocument': { 'completion': { 'completionItem': { 'snippetSupport': v:true } } } },
  \   },
  \ ]
let g:ycm_language_server += [
  \   {
  \     'name': 'yaml',
  \     'cmdline': [ 'node', expand( g:ycm_lsp_dir . '/yaml/node_modules/.bin/yaml-language-server' ), '--stdio' ],
  \     'filetypes': [ 'yaml' ],
  \     'capabilities': {
  \       'workspace': { 'configuration': v:true },
  \       'textDocument': {
  \         'completion': {
  \           'completionItem': { 'snippetSupport': v:true },
  \         }
  \       }
  \     },
  \   },
  \ ]
let g:ycm_language_server += [
  \   {
  \     'name': 'groovy',
  \     'cmdline': [ 'java', '-jar', expand( g:ycm_lsp_dir . '/groovy/groovy-language-server/build/libs/groovy-language-server-all.jar' ) ],
  \     'filetypes': [ 'groovy' ]
  \   },
  \ ]

" spell and grammars
let g:grammarous#languagetool_cmd = 'languagetool'
set thesaurus+=~/.vim/spell/dictionary/thesaurii.txt
set thesaurus+=~/.vim/spell/dictionary/mthesaur.txt
set dictionary=/usr/share/dict/words

" fastFold
nnoremap zuz <Plug>(FastFoldUpdate)
xnoremap <silent> <leader>iz :<c-u>FastFoldUpdate<cr>]z<up>$v[z<down>^
xnoremap <silent> <leader>az :<c-u>FastFoldUpdate<cr>]zV[z
let g:fastfold_savehook               = 1
let g:fastfold_fold_command_suffixes  = ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

let g:markdown_folding                = 1
let g:rst_fold_enabled                = 1
let g:tex_fold_enabled                = 1
let g:vimsyn_folding                  = 'af'
let g:xml_syntax_folding              = 1
let g:javaScript_fold                 = 1
let g:sh_fold_enabled                 = 7
let g:zsh_fold_enable                 = 1
let g:ruby_fold                       = 1
let g:perl_fold                       = 1
let g:perl_fold_blocks                = 1
let g:r_syntax_folding                = 1
let g:rust_fold                       = 1
let g:php_folding                     = 1
let g:fortran_fold                    = 1
let g:clojure_fold                    = 1
let g:baan_fold                       = 1

" vim-yaml-folds
set foldlevelstart=20
" yamllint                                                          " brew install yamllint
" ale                                                               " :help g:ale_echo_msg_format
let g:ale_echo_msg_format                 = '[%linter%] %code%: %s [%severity%] '
let g:ale_sign_error                      = '✘'
let g:ale_sign_warning                    = '⚠'
let g:ale_lint_on_text_changed            = 'never'
let g:ale_fix_on_save                     = 0
let g:ale_lint_on_save                    = 1
let g:ale_lint_on_text_changed            = 'never'
let g:ale_warn_about_trailing_blank_lines = 1
let g:ale_warn_about_trailing_whitespace  = 1

" call matchadd('ColorColumn', '\%81v', 100)
" match OverLength /\%81v.\+/

augroup collumnLimit
  set colorcolumn=80
  highlight CollumnLimit    guibg=NONE    guifg=#4e4e4e    ctermfg=240
  autocmd!
  let collumnLimit = 80
  let pattern      = '\%<' . (collumnLimit+1) . 'v.\%>' . collumnLimit . 'v'
  let w:m1         = matchadd('CollumnLimit', pattern, -1)
augroup END

" /**************************************************************
"              _                           _
"   __ _ _   _| |_ ___   ___ _ __ ___   __| |
"  / _` | | | | __/ _ \ / __| '_ ` _ \ / _` |
" | (_| | |_| | || (_) | (__| | | | | | (_| |
"  \__,_|\__,_|\__\___/ \___|_| |_| |_|\__,_|
"
" **************************************************************/
if has( "autocmd" )
  autocmd BufRead,BufNewFile *.t             set filetype=perl
  autocmd BufRead,BufNewFile *.ltsv          set filetype=ltsv syntax=groovy noexpandtab
  autocmd BufEnter           *.md            exe 'noremap <F5> :!"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" %:p "--no-gpu"<CR>'
  autocmd BufEnter           *.markdown      exe 'noremap <F5> :!"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome --no-gpu"  %:p<CR>'
  " autocmd BufWinLeave      *               silent! mkview
  autocmd BufWinEnter        *               silent! loadview
  autocmd QuickFixCmdPost    *grep*          cwindow
  autocmd Syntax       * syn match ExtraWhitespace /\s\+$\| \+\ze\t/
  autocmd Syntax       c,cpp,python,vim,xml,html,xhtml,vim,groovy,Jenkinsfile,yaml normal zM
  autocmd Syntax       c,cpp,python,vim,xml,html,xhtml,vim,groovy,Jenkinsfile,yaml let g:indentLine_loaded=1
  autocmd Syntax       groovy,Jenkinsfile,python                                   setlocal foldmethod=indent
  " https://vim.fandom.com/wiki/Syntax_folding_for_Java
  autocmd FileType     java                       setlocal foldmarker=/**,**/ foldmethod=marker foldcolumn=1
  autocmd FileType     make,snippet,robot         setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType     yaml                       setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  autocmd FileType     javascript                 syntax   clear jsFuncBlock  " rainbow issue #2
  autocmd BufEnter     *                          if &diff         | let g:blamer_enabled=0 | endif    " ╮ disable git blame in diff mode
  autocmd BufEnter     *                          if ! empty(&key) | let g:blamer_enabled=0 | endif    " ╯ and encrypt mode
  autocmd BufWritePre  *\(.ltsv\|.diffs\)\@<!     silent! retab!              " automatic retab: https://vim.fandom.com/wiki/Remove_unwanted_spaces
  autocmd BufWritePre  *                          %s/\s\+$//e | %s/\r$//e     " automatic remove trailing space
  autocmd BufWritePost *\(.md\)                   silent :Toc                 " automatic build doctoc when save it
  " autocmd BufWritePre                                         *.html :normal gg=G
  " autocmd BufWritePre,BufWritePost,FileWritePre,FileWritePost *      silent :redraw!

  augroup shellStyle                                                         " automatic redraw for shellcheck
    autocmd!
    autocmd  Syntax                   bash           set filetype=sh
    autocmd  FileType                 sh,bash,shell  call DoRedraw()
    autocmd  BufWritePre,BufWritePost *.sh           call DoRedraw()
    autocmd  BufWritePre              *.sh           silent :retab!          " automatic retab
    autocmd! BufWritePost             *.sh           silent :redraw!         " automatic redraw for shellcheck
    " autocmd BufWritePost            *.sh           !chmod +x %
  augroup END

  augroup devops
    autocmd BufRead,BufNewFile *                                   setfiletype jenkinsfile
    autocmd FileType           groovy,Jenkinsfile,json,sh,markdown set tabstop=2 softtabstop=2 shiftwidth=2
    autocmd FileType           vim                                 let g:ycm_confirm_extra_conf = 1
    " git config files
    autocmd BufNewFile,BufRead
          \ *.git/config,.gitconfig,.gitmodules,gitconfig
          \,~/.marslo/.gitalias
          \ setfiletype gitconfig

    " autocmd Syntax                         groovy,Jenkinsfile :IndentLinesEnable
    " autocmd BufReadPost                    Jenkinsfile        set filetype=groovy syntax=groovy
    " autocmd BufNewFile,BufRead             Jenkinsfile        setf groovy
    " autocmd BufNewFile,BufRead,BufReadPost Jenkinsfile        setlocal foldmethod=indent
    " autocmd FileType                       Jenkinsfile        setlocal filetype=groovy syntax=groovy foldmethod=indent
    " autocmd FileType                       Jenkinsfile        set syntax=groovy filetype=groovy

    " to setup filetype to groovy if first line matches `#!.*[/\\]groovy`
    if did_filetype()
      finish
    endif
    if getline(1) =~ '^#!.*[/\\]groovy\>'
      setf groovy
    endif
  augroup END

  augroup CustomTabularize
    autocmd!
    " https://github.com/jwhitley/vimrc/blob/master/.vimrc
    " autocmd VimEnter * if exists(":Tabularize") | exe ":AddTabularPattern! bundles /[^ ]\\+\\//l1r0" | endif
    " add in  plugin/TabularMaps.vim
    autocmd VimEnter * if exists(":Tabularize") | exe ":AddTabularPattern 1,  /^[^,]*\zs,/r1c1l0" | endif
    autocmd VimEnter * if exists(":Tabularize") | exe ":AddTabularPattern 1=  /^[^=]*\zs="        | endif
    autocmd VimEnter * if exists(":Tabularize") | exe ":AddTabularPattern 1== /^[^=]*\zs=/r0c0l0" | endif
  augroup END

  augroup python
    autocmd BufNewFile,BufRead python
            \ set tabstop=4
            \ set softtabstop=4
            \ set shiftwidth=4
            \ setlocal shiftwidth=4
            \ setlocal tabstop=4
            \ setlocal softtabstop=4
            \ setlocal noautoindent
            \ fileformat=unix
    autocmd FileType python syntax keyword pythonDecorator print self
    autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4 noautoindent
    autocmd FileTYpe python set isk-=.
  augroup END

  augroup vimrc
    autocmd! BufWritePost  ~/.vimrc silent! source %
    autocmd  BufReadPre    *        setlocal foldmethod=indent
    autocmd  BufWinEnter   *        if &fdm == 'indent' | setlocal foldmethod=manual | endif
  augroup END

  " skip quickfix : https://vi.stackexchange.com/a/16709/7389
  augroup termIgnore
      autocmd!
      autocmd TerminalOpen * set nobuflisted
  augroup END

  if version > 703
    " autocmd FocusLost * set norelativenumber
    autocmd FocusGained * set relativenumber
    autocmd InsertEnter * set norelativenumber
    autocmd InsertLeave * set relativenumber
    autocmd CmdwinEnter * set norelativenumber
    autocmd CmdwinLeave * set relativenumber
    autocmd CmdwinEnter * let b:ei_save = &eventignore | set eventignore=CursorHold,InsertEnter
    autocmd CmdwinLeave * let &eventignore = b:ei_save
  endif

endif

" set list lcs=tab:\|\
" uncomment the following to have vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" " highlight clear SpellBad Conceal PmenuSel SpecialKey Exception Folded TabLineSel Search CorsorLine
" highlight SpellBad       term=underline   cterm=underline     ctermbg=NONE    ctermfg=160
" highlight Conceal        term=NONE        cterm=NONE          ctermbg=NONE    ctermfg=239
" highlight SpecialKey     term=NONE        cterm=NONE          ctermfg=130
" highlight Constant       term=NONE        ctermfg=99
" highlight LineNr         term=NONE        ctermbg=NONE        ctermfg=235    guifg=#586e75
" highlight CursorLineNr   term=underline   cterm=NONE          ctermbg=NONE        ctermfg=124
" highlight CursorLine     term=NONE        cterm=NONE          ctermbg=NONE        ctermfg=NONE
" highlight Exception      term=bold        ctermbg=NONE        ctermfg=136
" highlight Visual         term=NONE        cterm=underline     ctermbg=NONE
" highlight Comment        ctermfg=234      guifg=#002b36
" highlight Folded         term=underline   cterm=underline     ctermfg=235     ctermbg=0
" highlight FoldColumn     term=NONE        cterm=NONE          ctermfg=235     ctermbg=0
" highlight StatusLineNC   term=NONE        cterm=NONE          ctermfg=235     ctermbg=black
" highlight StatusLine     cterm=NONE       ctermfg=238         ctermbg=black
" highlight CmdLineEnter   cterm=NONE       ctermfg=238
" highlight CmdLineLeave   cterm=NONE       ctermfg=238
" highlight MsgArea        cterm=NONE       ctermfg=238
" highlight vimGroup       term=NONE        cterm=NONE          ctermfg=4
" highlight NonText        cterm=NONE       ctermfg=239
" highlight Pmenu          term=NONE        cterm=NONE          ctermfg=2       ctermbg=NONE
" highlight PmenuSel       term=NONE        cterm=NONE          ctermfg=121     ctermbg=NONE
" highlight PmenuSbar      term=NONE        cterm=NONE          ctermfg=15      ctermbg=234
" highlight PmenuThumb     term=NONE        cterm=NONE          ctermfg=15      ctermbg=234
" highlight TabLineSel     term=underline   cterm=underline     ctermbg=NONE
" highlight VertSplit      cterm=NONE       ctermfg=12          ctermbg=NONE
" highlight MatchParen     term=inverse     cterm=inverse
" highlight Search         term=NONE        cterm=NONE          ctermbg=12      ctermfg=4
" highlight Statement      term=NONE        cterm=NONE          ctermfg=11      ctermbg=NONE
" highlight Type           term=NONE        cterm=NONE          ctermfg=136     ctermbg=NONE
" highlight Visual         term=bold,underline   cterm=bold,underline     ctermfg=NONE    ctermbg=NONE
"
" highlight Normal         ctermfg=23        guifg=#586e75
" highlight Boolean        ctermfg=196
" highlight Number         ctermfg=61
" highlight String         ctermfg=88
" highlight Function       ctermfg=105
" highlight Structure      ctermfg=202
" highlight Define         ctermfg=179
" highlight Conditional    ctermfg=190
" highlight Operator       ctermfg=208
"
" " highlight Search         term=bold,underline   cterm=bold,underline     ctermfg=64      ctermbg=NONE
" highlight PreProc        term=NONE        cterm=NONE          ctermfg=166     ctermbg=NONE
" highlight ColorColumn    cterm=NONE       ctermfg=244         ctermbg=NONE
" highlight CollumnLimit   cterm=NONE       ctermfg=244         ctermbg=NONE
" highlight VertSplit      ctermfg=235      gui=reverse
" highlight IncSearch      term=standout    cterm=standout      ctermfg=148     ctermbg=238
" highlight Search         cterm=NONE       ctermfg=64          ctermbg=238     guifg=Black     guibg=Yellow

" highlight Cursor        guifg=white      guibg=gray          gui=bold
" highlight iCursor       guifg=white      guibg=steelblue     gui=underline
highlight SpellBad        term=underline   cterm=underline     ctermbg=0
highlight ExtraWhitespace ctermbg=red      guibg=red
highlight DiffText        term=reverse     cterm=reverse       ctermfg=109      ctermbg=235 gui=reverse guifg=#fabd2f guibg=#458588


" vim: tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=vim:foldmethod=marker:foldmarker="\ **************************************************************/,"\ /**************************************************************
