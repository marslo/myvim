" =============================================================================
"      FileName: vimrc
"        Author: marslo.jiao@gmail.com
"       Created: 2010-10
"       Version: 0.0.25
"    LastChange: 2023-09-15 16:20:32
" =============================================================================

set maxmempattern=5000
set nocompatible
set history=1000
set diffopt=filler,context:3
set spell spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add
set lazyredraw
runtime macros/matchit.vim

let vimrplugin_i386 = 1
set fileformat=unix
set nowrap                                                          " wrap lines
if has( 'win32' ) || has( 'win64' )
  let skip_loading_mswin=1
  source $VIMRUNTIME/vimrc_example.vim
  source $VIMRUNTIME/mswin.vim
  language messages utf-8                                           " at console
  set viminfo=%,<800,'10,/50,:100,h,f0
  set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.rar
  set tags=.\tags
else
  set viminfo=%,<800,'10,/50,:100,h,f0,n~/.vim/cache/.viminfo
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip
  set tags=tags
endif
if has("multi_byte")
  digraph oe 339
elseif &encoding == "iso-8859-15"
  digraph oe 189
endif

" if empty(glob('~/.vim/cache/'))
"   execute 'silent !mkdir -p ~/.vim/cache'
" endif
" if empty(glob('~/.vim/undo/'))
"   execute 'silent !mkdir -p ~/.vim/undo'
" endif

let bud=expand( '~/.vim/bundle' ) . '/'
let performance_mode = 1

" /**************************************************************
"                                  _
"  _ __  _ __ ___  _ __   ___ _ __| |_ _   _
" | '_ \| '__/ _ \| '_ \ / _ \ '__| __| | | |
" | |_) | | | (_) | |_) |  __/ |  | |_| |_| |
" | .__/|_|  \___/| .__/ \___|_|   \__|\__, |
" |_|             |_|                  |___/
"
" **************************************************************/
let mapleader   = ","
let g:mapleader = ","

" Vim Bundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

Bundle 'VundleVim/Vundle.vim'
Bundle 'tpope/vim-pathogen'
Bundle 'tpope/vim-surround'
Bundle 'godlygeek/tabular'
Bundle 'tpope/vim-repeat'
Bundle 'Yggdroot/indentLine'
Bundle 'kien/ctrlp.vim'
Bundle 'sjl/gundo.vim'
Bundle 'majutsushi/tagbar'
Bundle 'marslo/authorinfo'
Bundle 'marslo/EnhCommentify.vim'
Bundle 'marslo/auto-pairs'
Bundle 'tomtom/tlib_vim'
Bundle 'marslo/snipmate.vim'
Bundle 'marcWeber/vim-addon-mw-utils'
" Bundle 'garbas/vim-snipmate'
Bundle 'yegappan/mru'
Bundle 'taglist.vim'
Bundle 'grep.vim'
Bundle 'bogado/file-line'
Bundle 'vim-syntastic/syntastic'
Bundle 'rhysd/accelerated-jk'
Bundle 'Marslo/MarsloFunc'
Bundle 'LargeFile'
Bundle 'L9'
Bundle 'vim-autoformat/vim-autoformat'
Bundle 'mhinz/vim-signify'
Bundle 'airblade/vim-gitgutter'
Bundle 'mbbill/undotree'
" Python
Bundle 'python-mode/python-mode'
Bundle 'python_fold'
Bundle 'pyflakes/pyflakes'
Bundle 'python_match.vim'
Bundle 'Marslo/python-syntax'
Bundle 'valloric/MatchTagAlways'
" Colors and themes and syntax
Bundle 'luochen1990/rainbow'
Bundle 'txt.vim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'marslo/vim-coloresque'
Bundle 'marslo/marslo.vim'
Bundle 'marslo/MarsloVimOthers'
" Bundle 'plasticboy/vim-markdown.git'
Bundle 'gabrielelana/vim-markdown'
Bundle 'mzlogin/vim-markdown-toc'
Bundle 'altercation/vim-colors-solarized'
Bundle 'morhetz/gruvbox'
" Groovy
" Bundle 'groovy.vim--Ruley'
Bundle 'modille/groovy.vim'
Bundle 'marslo/Jenkinsfile-vim-syntax'
" dockerfile
Bundle 'ekalinin/Dockerfile.vim'
" yaml
Bundle 'stephpy/vim-yaml'
Bundle 'pedrohdz/vim-yaml-folds'
Bundle 'dense-analysis/ale'

call vundle#end()
call pathogen#infect()
filetype plugin indent on
syntax enable on

" /**************************************************************
"   __                  _   _
"  / _|_   _ _ __   ___| |_(_) ___  _ __
" | |_| | | | '_ \ / __| __| |/ _ \| '_ \
" |  _| |_| | | | | (__| |_| | (_) | | | |
" |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|
"
" **************************************************************/
function! GetVundle()                                               " GetVundle() inspired by: http://pastebin.com/embed_iframe.php?i=C9fUE0M3
  let vundleAlreadyExists=1
  if has( 'win32' ) || has( 'win64' )
    let bud=$VIM . '\bundle'
    let vud=bud . '\Vundle.vim'
    let vudcfg=expand(vud . '\.git\config')
  else
    let bud='~/.vim/bundle'
    let vud=bud . '/Vundle.vim'
    let vudcfg=expand(vud . '/.git/config')
  endif

  if filereadable(vudcfg)
    echo "Vundle has existed at " . expand(vud)
  else
    echo "Installing Vundle..."
    echo ""
    if isdirectory(expand(bud)) == 0
      call mkdir(expand(bud), 'p')
    endif
    execute 'silent !git clone https://github.com/VundleVim/Vundle.vim.git "' . expand(vud) . '"'
    let vundleAlreadyExists=0
  endif
endfunction
command! GetVundle :call GetVundle()

function! DoRedraw()
  execute "silent redraw!"
endfunction
nnoremap <M-l> :call DoRedraw()<CR>
map <D-l>      :call DoRedraw()<CR>

function! ToggleVerbose()
  if !&verbose
    set verbosefile=~/.log/vim/verbose.log
    set verbose=15
  else
    set verbose=0
    set verbosefile=
  endif
endfunction
command! ToggleVerbose :call ToggleVerbose()

function! ToggleWindowHorizontalVerticalSplit()
  if !exists( 't:splitType' )
    let t:splitType = 'vertical'
  endif

  if t:splitType == 'vertical' " is vertical switch to horizontal
    windo wincmd K
    let t:splitType = 'horizontal'
  else                         " is horizontal switch to vertical
    windo wincmd H
    let t:splitType = 'vertical'
  endif
endfunction
nnoremap <silent> <leader>wt :call ToggleWindowHorizontalVerticalSplit()<cr>

if isdirectory( expand(bud . 'MarsloFunc') )
  command! GetVim :call marslofunc#GetVim()<CR>
  nmap cmd :call marslofunc#OpenCMD()<CR>
  nmap gf :call marslofunc#GotoFile()<CR>
  xnoremap * :<C-u>call marslofunc#VSetSearch()<CR>/<C-R>=@/<CR><CR>
  xnoremap # :<C-u>call marslofunc#VSetSearch()<CR>?<C-R>=@/<CR><CR>
  nmap <F12> :call marslofunc#UpdateTags()<CR>
  nmap <C-F5> :call marslofunc#RunResult()<CR>
  nmap <leader>ti :call marslofunc#callit()<CR>
  if has('gui_running')
    nnoremap <A--> :call marslofunc#FontSize_Reduce()<CR>
    nnoremap <A-+> :call marslofunc#FontSize_Enlarge()<CR>
  endif

  augroup resCur
    autocmd!
      autocmd BufWinEnter * call marslofunc#ResCur()
  augroup END
  set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\*\\\|\\*/\\\|{{{\\d\\=','','g')
  set foldtext=marslofund#MyFoldText()<CR>
endif

" twiddle case : https://vim.fandom.com/wiki/Switching_case_of_characters#Twiddle_case
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv

" spell
" set spellcamelcase=1
" ignore CamelCase words when spell checking
function! IgnoreSpells()
  syntax match Url "\w\+:\/\/[:/?#[\]@!$&'()*+,;=0-9[:lower:][:upper:]_\-.~]\+" contains=@NoSpell containedin=@AllSpell transparent
  syntax match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell transparent
  syntax match CamelCase /\<[A-Z][a-z]\+[A-Z].\{-}\>/ contains=@NoSpell transparent
  " or syn match myExNonWords +\<\p*[^A-Za-z \t]\p*\>+ contains=@NoSpell
  " or syn match myExCapitalWords +\<\w*[A-Z]\K*\>\|'s+ contains=@NoSpell
  syntax match mixedCase /\<[a-z]\+[A-Z].\{-}\>/ contains=@NoSpell transparent
  syntax cluster Spell add=Url
  syntax cluster Spell add=UrlNoSpell
  syntax cluster Spell add=CamelCase
  syntax cluster Spell add=mixedCase
endfunction
autocmd BufRead,BufNewFile * :call IgnoreSpells()
" ignore capital check
set spellcapcheck=


" /**************************************************************
"                                                      _
"  _ __  _ __ ___   __ _ _ __ __ _ _ __ ___  _ __ ___ (_)_ __   __ _
" | '_ \| '__/ _ \ / _` | '__/ _` | '_ ` _ \| '_ ` _ \| | '_ \ / _` |
" | |_) | | | (_) | (_| | | | (_| | | | | | | | | | | | | | | | (_| |
" | .__/|_|  \___/ \__, |_|  \__,_|_| |_| |_|_| |_| |_|_|_| |_|\__, |
" |_|              |___/                                       |___/
"
" **************************************************************/

" Programming configs for Python
if has( "autocmd" )
  au FileType python syn keyword pythonDecorator print self
  au FileType python set tabstop=4 softtabstop=4 shiftwidth=4
  au FileTYpe python set isk-=.
  " set textwidth=80
endif
let python_highlight_all = 1                                        " syntax-python

" Python-mode configurations
if isdirectory( expand(bud . 'python-mode') ) || has('python3')
  nnoremap <leader>p :PymodeLint<CR>                                          " trigger pymodelint by manual
  let g:pymode                            = 1                                                            " 1: turn on python-mode plugin
  let g:pymode_syntax_all                 = 1
  let g:pymode_warnings                   = 0                                 " turn off plugin's warnings
  let g:pymode_folding                    = 1
  let g:pymode_options_colorcolumn        = 1
  let g:pymode_trim_whitespaces           = 1                                 " trim unused white spaces on save
  let g:pymode_lint                       = 1                                 " turn on code checking
  let g:pymode_lint_checkers              = ['pyflakes', 'pep8', 'mccabe']
  let g:pymode_lint_ignore                = "E111,E114,E501,W0611,E266"       " E501: long line; E111&E114: 4 spaces indent; E266: too many # for comments
  let g:pymode_options                    = 0
  let g:pymode_rope                       = 0
  let g:pymode_indent                     = 0
  let g:pymode_syntax_highlight_self      = g:pymode_syntax_all
  let g:pymode_quickfix_minheight         = 3
  let g:pymode_quickfix_maxheight         = 3
  if !has('python')
    let g:pymode                          = 0
  endif
  let g:python_check_syntax               = 0                                     " Disalbe Check python script syntax on every save
  let g:pymode_lint_on_write              = 0                                    " Disalbe on save checking
  " let g:pymode_rope_regenerate_on_write = 0
  let g:pymode_lint_unmodified            = 1
  let g:pymode_indent                     = 1
endif

" /**************************************************************
"  _       _             __                     __  _   _
" (_)_ __ | |_ ___ _ __ / _| __ _  ___ ___     / / | |_| |__   ___ _ __ ___   ___
" | | '_ \| __/ _ \ '__| |_ / _` |/ __/ _ \   / /  | __| '_ \ / _ \ '_ ` _ \ / _ \
" | | | | | ||  __/ |  |  _| (_| | (_|  __/  / /   | |_| | | |  __/ | | | | |  __/
" |_|_| |_|\__\___|_|  |_|  \__,_|\___\___| /_/     \__|_| |_|\___|_| |_| |_|\___|
"
" **************************************************************/
if has('gui_running')
  set go=                                                           " hide everything (go = guioptions)
  set cpoptions+=n
  set guifont=Ubuntu\ Mono:h22
  " set guifont=Comic\ Mono:h24:cANSI:qDRAFT
  " set guifontwide=NSimsun:h16
  if has('win32') || has('win64')
    set lines=28                                                    " the initialize size
    set columns=106
    if !filereadable("$VIM\vim90\vimtweak.dll")
      au GUIENTER * call libcallnr("vimtweak.dll", "SetAlpha", 243)
    endif
  else
  set lines=36                                                      " the initialize size
  set columns=124
  endif
endif

if exists('$TMUX')
  set term=screen-256color
endif

if 'xterm-256color' == $TERM
  set t_Co=256
endif

if has('gui_running') || 'xterm-256color' == $TERM
  set background=dark
  " colorscheme solarized
  " colorscheme marslo
  colorscheme gruvbox
  let psc_style='cool'
else
  set t_Co=8
  set t_Sb=^[[4%dm
  set t_Sf=^[[3%dm
  colorscheme marslo16
endif

nmap <leader>v :e ~/.vimrc<CR>

" /**************************************************************
"           _   _   _
"  ___  ___| |_| |_(_)_ __   __ _
" / __|/ _ \ __| __| | '_ \ / _` |
" \__ \  __/ |_| |_| | | | | (_| |
" |___/\___|\__|\__|_|_| |_|\__, |
"                           |___/
"
" **************************************************************/
set ttyfast                                                         " enable fast terminal connection.
set clipboard+=unnamed                                              " copy the content to system clipboard by using y/p
set clipboard+=unnamedplus
set iskeyword-=.
set autochdir
set fileencodings=utf-8,gbk,gb18030,cp936,gb2312,gb18030,latin1,ucs-bom
set termencoding=utf-8
set encoding=utf-8                                                  " input chinese (=cp936)
let &termencoding=&encoding
set selection=exclusive                                             " mouse settings
set selectmode=mouse,key
set nobackup noswapfile nowritebackup noundofile noendofline
set number                                                          " line number
set report=0
set autoread                                                        " set auto read when a file is changed by outside
set showmatch                                                       " show matching bracets (shortly jump to the other bracets)
set matchtime=1                                                     " the shortly time
set tabstop=2                                                       " tab width
set softtabstop=2                                                   " width for backspace
set shiftwidth=2                                                    " the tab width by using >> & <<
set autoindent smartindent expandtab
set cindent
set cinoptions=(0,u0,U0
set smarttab                                                        " smarttab: the width of <Tab> in first line would refer to 'shiftwidth' parameter
set linebreak
set modifiable
set write
set incsearch hlsearch ignorecase smartcase                         " search
set magic                                                           " regular expression
set linespace=0
set wildmenu
set wildmode=longest,list,full                                      " completion mode that is used for the character
set noerrorbells novisualbell                                       " ┐ turn off
set t_vb=                                                           " ┘ error beep/flash
set belloff=all                                                     " ┘ beep/flash
set list
set listchars=tab:\→\ ,trail:·,extends:»,precedes:«,nbsp:·
set cursorline                                                      " highlight the current line
set guicursor=a:hor1
set guicursor+=i-r-ci-cr-o:hor2-blinkon0
set virtualedit=onemore                                             " allow for cursor beyond last character
set scrolloff=3                                                     " scroll settings
set sidescroll=1
set sidescrolloff=5
set imcmdline                                                       " fix context menu messing
set complete+=kspell
set completeopt=longest,menuone                                     " supper tab
set foldenable                                                      " enable fold
set foldcolumn=1
set foldexpr=1                                                      " shown line number after fold
set foldlevel=100                                                   " not fold while vim set up
set shortmess+=filmnrxoOtTc                                         " abbrev. of messages (avoids 'hit enter')
set viewoptions=folds
set backspace=indent,eol,start                                      " make backspace h, l, etc wrap to
set whichwrap+=<,>,h,l
set go+=a                                                           " visual selection automatically copied to the clipboard
set hidden                                                          " switch between buffers with unsaved change
set equalalways
set formatoptions=tcrqn
set formatoptions+=rnmMB                                            " remove the backspace for combine lines (only for chinese)
set matchpairs+=<:>
" set autowrite
if has('cmdline_info')
  set ruler                                                         " ruler: show line and column number
  set showcmd                                                       " show (partial) command in status line
endif
if has('statusline')
  set laststatus=2                                                  " set status bar
  set statusline=%#User2#%m%r%*\ %F\ %y,%{&fileformat}
  " set statusline+=\ %{fugitive#statusline()}
  set statusline+=%=\ %-{strftime(\"%H:%M\ %d/%m/%Y\")}\ %b[A],0x%B\ %c%V,%l/%L\ %1*--%n%%--%*\ %p%%\ |
endif
" set synmaxcol=128
" set binary
set exrc
set secure

if has('persistent_undo')
  set noundofile
endif
if version > 74399
  set cryptmethod=blowfish2
endif


" /**************************************************************
"      _                _             _
"  ___| |__   ___  _ __| |_ ___ _   _| |_
" / __| '_ \ / _ \| '__| __/ __| | | | __|
" \__ \ | | | (_) | |  | || (__| |_| | |_
" |___/_| |_|\___/|_|   \__\___|\__,_|\__|
"
" **************************************************************/
noremap <F1> <ESC>
inoremap <F1> <ESC>a
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <leader>bd :bd<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-a> <ESC>^
inoremap <C-a> <ESC>I
cnoremap <C-a> <Home>
nnoremap <C-e> <ESC>$
inoremap <C-e> <ESC>A
cnoremap <C-e> <End>
nnoremap Y y$
nnoremap <Del> "_x
xnoremap <Del> "_d
nnoremap <space> za
nnoremap & :&&<CR>
xnoremap & :&&<CR>
vmap s <Plug>VSurround
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

cnoreabbrev W w
cnoreabbrev W! w!
cnoreabbrev Q q
cnoreabbrev Q! q!
cnoreabbrev X x
cnoreabbrev X! x!
cnoreabbrev XA xa
cnoreabbrev XA! xa!
cnoreabbrev WQ wq
cnoreabbrev WQ! wq!
cnoreabbrev QA qa
cnoreabbrev QA! qa!
cnoreabbrev WA wa
cnoreabbrev WA! wa!
cnoreabbrev NOH noh
cnoreabbrev Noh noh
cnoreabbrev %Y %y
cnoreabbrev %D %d
cnoremap sudow!! w !sudo tee > /dev/null %
cnoremap sw!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!
cnoremap rd redraw!

inoremap <leader>tt <C-R>=strftime("%d/%m/%y %H:%M:%S")<cr>
inoremap <leader>fn <C-R>=expand("%:t:r")<CR>
inoremap <leader>fe <C-R>=expand("%:t")<CR>
inoremap <leader>w <C-O>:w<CR>
nnoremap <leader>G :%s///gn<CR>
nnoremap <leader>idl :IndentLineEnable<CR>

nnoremap <leader>zil :g/^/ s//\=line('.').' '/<CR>    " [i]nsert [l]ine number
nnoremap <leader>zcm :%s/<C-v><CR>/\r/g<CR>           " [c]onvert [m] to new line
nnoremap <leader>zwl :%s///gn<CR>                     " show the matches numbers ( [w]c -[l] )
nnoremap <leader>zdm :%s/<C-v><CR>//ge<CR>            " [d]elete [m]()
nnoremap <leader>zdb :%s/\s\+$//<CR>                  " [d]elete trailing space ( [b]lank )
nnoremap <leader>zbl :g/^\s*$/d<CR>                   " [d]elete [b]lank [l]ine
nnoremap <leader>zd2 :%s/​//g<CR>                " [d]elete <200b>
nnoremap <leader>zdd :%s/ / /g<CR>                    " [d]elete [d]ot(• )
nnoremap <leader>zds :%s/^<span.*span>//g<CR>         " [d]elete [s]pan tag
nnoremap <leader>zdi :%s/^\s\+//<CR>                  " [d]elete [i]ndent spaces
nnoremap <leader>zid i•<ESC>                          " [i]nsert [d]ot(•)
nnoremap <leader>cr 0yt=a<c-r>=<c-r>"<cr><esc>        " cacular expr
nnoremap <leader>* *<C-O>:%s///gn<CR>                 " cacular expr

if version > 703
  " autocmd FocusLost * set norelativenumber
  autocmd FocusGained * set relativenumber
  autocmd InsertEnter * set norelativenumber
  autocmd InsertLeave * set relativenumber
  autocmd CmdwinEnter * set norelativenumber
  autocmd CmdwinLeave * set relativenumber
  autocmd CmdwinEnter * let b:ei_save = &eventignore | set eventignore=CursorHold,InsertEnter
  autocmd CmdwinLeave * let &eventignore = b:ei_save
endif

iabbrev <leader>/* /*********************************
iabbrev <leader>*/ *********************************/
iabbrev <leader>#- #------------------

" /**************************************************************
"        _             _                  _   _   _
"  _ __ | |_   _  __ _(_)_ __    ___  ___| |_| |_(_)_ __   __ _ ___
" | '_ \| | | | |/ _` | | '_ \  / __|/ _ \ __| __| | '_ \ / _` / __|
" | |_) | | |_| | (_| | | | | | \__ \  __/ |_| |_| | | | | (_| \__ \
" | .__/|_|\__,_|\__, |_|_| |_| |___/\___|\__|\__|_|_| |_|\__, |___/
" |_|            |___/                                    |___/
"
" **************************************************************/
let g:auto_save                 = 0                                 " enable AutoSave on Vim startup

let g:ctrlp_map                 = '<c-p>'                           " CtrlP
let g:ctrlp_working_path_mode   = 'ra'                              " search parents as well (stop searching safety)
let g:ctrlp_max_height          = 8
let g:ctrlp_max_depth           = 100
let g:ctrl_root_makers          = ['.ctrlp']                        " stop search if these files present
let g:ctrlp_use_caching         = 1
let g:ctrlp_clear_cache_on_exit = 0                                 " cross session caching
if has('win32') || has('win95') || has('win64')
  let g:ctrlp_cache_dir = $VIM . '/cache/ctrlp'
else
  let g:ctrlp_cache_dir = '$HOME/.vim/cache/ctrlp'
endif
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|rpm|tar|gz|bz2|zip|ctags|tags)|tags|ctags$',
    \ 'link': 'some_bad_symbolic_links',
    \ }

let g:EnhCommentifyAlignRight      = 'Yes'
let g:EnhCommentifyRespectIndent   = 'yes'
let g:EnhCommentifyPretty          = 'Yes'
let g:EnhCommentifyMultiPartBlocks = 'Yes'
let g:EnhCommentifyUseSyntax       = 'Yes'

map <leader>ta :TagbarToggle<CR>
let g:tagbar_left             = 1
let g:tagbar_width            = 20
let g:tagbar_autofocus        = 1
let g:tagbar_expand           = 1
let g:tagbar_singleclick      = 1
let g:tagbar_iconchars        = ['+', '-']
let g:tagbar_autoshowtag      = 1
let g:tagbar_show_linenumbers = 0

map <leader>aid :AuthorInfoDetect<CR>
let g:vimrc_author = 'marslo'
let g:vimrc_email  = 'marslo.jiao@gmail.com'
au BufWritePre, FileWritePre * :AuthorInfoDetect<CR>

let MRU_Auto_Close    = 1                                           " most recently used(mru)
let MRU_Max_Entries   = 10
let MRU_Exclude_Files = '^/tmp/.*\|^/temp/.*\|^/media/.*\|^/mnt/.*'
map <leader>re :MRU<CR>

set undodir=~/.vim/undo/
set undofile
noremap <Leader>u :GundoToggle<CR>

let g:rainbow_active    = 1
let g:rainbow_operators = 1
let g:rainbow_conf      = {
\   'guifgs' : ['#6A5ACD', '#B22222', '#C0FF3E', '#EEC900', '#9A32CD', '#EE7600', '#98fb98', '#686868'],
\   'ctermfgs' : 'xterm-256color' == $TERM ? ['141', '196', '112', '208', '129', '166', '85', '237'] : ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta'],
\   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\   'separately': {
\     '*': {},
\     'markdown': {
\       'parentheses_options': 'containedin=markdownCode contained',
\     },
\     'css': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'scss': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'html': {
\       'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\     },
\     'stylus': {
\       'parentheses': ['start=/{/ end=/}/ fold contains=@colorableGroup'],
\     }
\   }
\}

let g:indentLine_enabled              = 1
let g:indentLine_color_gui            = "#686868"
let g:indentLine_color_term           = 239
let g:indentLine_indentLevel          = 20
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_color_tty            = 0
let g:indentLine_faster               = 1
let g:indentLine_concealcursor        = 'inc'
let g:indentLine_conceallevel         = 2
let g:indentLine_char                 = '¦'

let g:AutoPairs        = {'(':')', '[':']', '{':'}', '<':'>',"'":"'",'"':'"', '`':'`'}
let g:AutoPairsParens  = {'(':')', '[':']', '{':'}', '<':'>'}
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'

" configure syntastic syntax checking to check on open as well as save
set statusline+=%#warningmsg#
set statusline+=\ %{SyntasticStatuslineFlag()}
set statusline+=\ %* |
let g:syntastic_always_populate_loc_list  = 1
let g:syntastic_auto_loc_list             = 1
let g:syntastic_check_on_open             = 1
let g:syntastic_check_on_wq               = 1
let g:syntastic_loc_list_height           = 2
let g:syntastic_ignore_files              = ['\.py$']
let g:syntastic_check_on_wq               = 0
let g:syntastic_check_on_open             = 1
let g:syntastic_html_tidy_ignore_errors   = [" proprietary attribute \"ng-"]
let g:syntastic_always_populate_loc_list  = 1
let g:syntastic_auto_loc_list             = 1

nnoremap <Leader>cc :let &cole=(&cole == 2) ? 0 : 2 <bar> echo 'conceallevel ' . &cole <CR>
" for vim-markdown
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_override_foldtext      = 0
let g:vim_markdown_autowrite              = 1
let g:vim_markdown_new_list_item_indent   = 4
let g:vim_markdown_toc_autofit            = 1
let g:vim_markdown_conceal                = 0
" set conceallevel                        = 2
let g:vim_markdown_frontmatter            = 1
let g:vim_markdown_json_frontmatter       = 1

" for vim-markdown-toc
let g:vmt_auto_update_on_save     = 1
let g:vmt_cycle_list_item_markers = 0

noremap <Leader>tm :TableModeToggle<CR>
let g:table_mode_corner           = '|'
let g:table_mode_header_fillchar  = '-'
let g:table_mode_align_char       = ":"
let g:table_mode_corner           = "|"
let g:table_mode_align_char       = ":"
" let g:table_mode_corner_corner  = '+'
function! s:isAtStartOfLine( mapping )
  let text_before_cursor = getline('.')[0 : col('.')-1]
  let mapping_pattern = '\V' . escape(a:mapping, '\')
  let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
  return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
endfunction

inoreabbrev <expr> <bar><bar>
          \ <SID>isAtStartOfLine('\|\|') ?
          \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
inoreabbrev <expr> __
          \ <SID>isAtStartOfLine('__') ?
          \ '<c-o>:silent! TableModeDisable<cr>' : '__'

" let g:tabular_loaded = 1
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <leader>a: :Tabularize /:\zs<CR>
  vmap <leader>a: :Tabularize /:\zs<CR>
  inoremap <silent> <Bar>   <Bar><Esc>:call <SID>table_auto_align()<CR>
  function! s:table_auto_align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|'
      \ && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
      let column   = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
      let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
      Tabularize/|/l1
      normal! 0
      call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
  endfunction
endif

" fugitive
nnoremap <Leader>ga :Git add %:p<CR><CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <leader>gp :Ggrep<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gc :Git commit -am ""<Left>
command! -bar -nargs=* Gpull execute 'Git pull'
command! -bar -nargs=* Gpush execute 'Git push'

" Snippet
imap <C-J> <Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger
imap <Tab> <Plug>snipMateNextOrTrigger

let g:plist_display_format       = 'xml'
let g:plist_json_filetype        = 'javascript'

let g:signify_disable_by_default = 0
let g:signify_vcs_list           = [ 'git' ]

" vim-yaml-folds
set foldlevelstart=20
" yamllint
" brew install yamllint
let g:ale_echo_msg_format      = '[%linter%] %s [%severity%]'
let g:ale_sign_error           = '✘'
let g:ale_sign_warning         = '⚠'
let g:ale_lint_on_text_changed = 'never'

" call matchadd('ColorColumn', '\%81v', 100)
" match OverLength /\%81v.\+/
function! TriggerYCM()
  if g:loaded_youcompleteme == 1
    let g:loaded_youcompleteme = 0
  else
    let g:loaded_youcompleteme = 1
  endif
endfunction
nmap <C-y> :call TriggerYCM()<CR>

" https://vim.fandom.com/wiki/Faster_loading_of_large_files
" file is large from 10mb
let g:LargeFile = 1024 * 1024 * 10
augroup LargeFile
  autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function LargeFile()
  set eventignore    += FileType                                         " no syntax highlighting etc
  setlocal bufhidden  = unload                                         " save memory when other file is viewed
  setlocal buftype    = nowrite                                          " is read-only (write with :w new_filename)
  setlocal undolevels = -1                                            " no undo possible
  " display message
  autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction

augroup collumnLimit
  set colorcolumn=80
  highlight CollumnLimit        guibg=NONE    guifg=#4e4e4e       ctermfg=240
  autocmd!
  let collumnLimit = 80
  let pattern = '\%<' . (collumnLimit+1) . 'v.\%>' . collumnLimit . 'v'
  let w:m1=matchadd('CollumnLimit', pattern, -1)
augroup END

" /**************************************************************
"              _                           _
"   __ _ _   _| |_ ___   ___ _ __ ___   __| |
"  / _` | | | | __/ _ \ / __| '_ ` _ \ / _` |
" | (_| | |_| | || (_) | (__| | | | | | (_| |
"  \__,_|\__,_|\__\___/ \___|_| |_| |_|\__,_|
"
" **************************************************************/
if has( "autocmd" )
  autocmd BufRead,BufNewFile *.t           set filetype=perl
  autocmd BufEnter           *.md          exe 'noremap <F5> :!"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" %:p "--no-gpu"<CR>'
  autocmd BufEnter           *.markdown    exe 'noremap <F5> :!"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome --no-gpu"  %:p<CR>'
  " autocmd BufWinLeave      *             silent! mkview
  autocmd BufWinEnter        *             silent! loadview
  autocmd QuickFixCmdPost    *grep*        cwindow
  autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/
  autocmd Syntax c,cpp,python,vim,xml,html,xhtml,vim,groovy,Jenkinsfile,yaml normal zM
  autocmd Syntax c,cpp,python,vim,xml,html,xhtml,vim,groovy,Jenkinsfile,yaml let g:indentLine_loaded=1
  autocmd Syntax groovy,Jenkinsfile,python setlocal foldmethod=indent
  " https://vim.fandom.com/wiki/Syntax_folding_for_Java
  autocmd FileType java                    setlocal foldmarker=/**,**/ foldmethod=marker foldcolumn=1
  autocmd FileType make,snippet,robot      set      tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType yaml                    setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  autocmd FileType javascript              syntax   clear jsFuncBlock " rainbow issue #2
  " https://vim.fandom.com/wiki/Remove_unwanted_spaces
  autocmd BufWritePre * :%s/\s\+$//e | %s/\r$//e                    " automatic remove trailing space
  autocmd BufWritePre * :retab!                                     " automatic retab
  " autocmd BufWritePre                                         *.html :normal gg=G
  " autocmd BufWritePre,BufWritePost,FileWritePre,FileWritePost *       silent :redraw!

  augroup shellStyle                                                " automatic redraw for shellcheck
    autocmd!
    autocmd Syntax                   bash           set filetype=sh
    autocmd FileType                 sh,bash,shell  call DoRedraw()
    autocmd BufWritePre,BufWritePost *.sh           call DoRedraw()
    autocmd BufWritePre              *.sh           silent :retab!  " automatic retab
    autocmd BufWritePost             *.sh           silent :redraw! " automatic redraw for shellcheck
    " autocmd BufWritePost           *.sh           !chmod +x %
  augroup END

  augroup devops
    autocmd BufRead,BufNewFile *                                   setfiletype jenkinsfile
    autocmd FileType           groovy,Jenkinsfile,json,sh,markdown set tabstop=2 softtabstop=2 shiftwidth=2
    " git config files
    autocmd BufNewFile,BufRead
          \ *.git/config,.gitconfig,.gitmodules,gitconfig
          \,~/.marslo/.gitalias
          \ setfiletype gitconfig
    autocmd FileType vim let g:ycm_confirm_extra_conf = 1
    " autocmd Syntax                         groovy,Jenkinsfile :IndentLinesEnable
    " autocmd BufReadPost                    Jenkinsfile        set filetype=groovy syntax=groovy
    " autocmd BufNewFile,BufRead             Jenkinsfile        setf groovy
    " autocmd BufNewFile,BufRead,BufReadPost Jenkinsfile        setlocal foldmethod=indent
    " autocmd FileType                       Jenkinsfile        setlocal filetype=groovy syntax=groovy foldmethod=indent
    " autocmd FileType                       Jenkinsfile        set syntax=groovy filetype=groovy
    if did_filetype()
      finish
    endif
    if getline(1) =~ '^#!.*[/\\]groovy\>'
      setf groovy
    endif
  augroup END

  augroup CustomTabularize
    autocmd!
    " https://github.com/jwhitley/vimrc/blob/master/.vimrc
    " autocmd VimEnter * if exists(":Tabularize") | exe ":AddTabularPattern! bundles /[^ ]\\+\\//l1r0" | endif
    " add in  plugin/TabularMaps.vim
    autocmd VimEnter * if exists(":Tabularize") | exe ":AddTabularPattern 1,    /^[^,]*\zs,/r1c1l0" | endif
    autocmd VimEnter * if exists(":Tabularize") | exe ":AddTabularPattern 1=    /^[^=]*\zs="        | endif
    autocmd VimEnter * if exists(":Tabularize") | exe ":AddTabularPattern 1==   /^[^=]*\zs=/r0c0l0" | endif
  augroup END

  augroup python
    autocmd BufNewFile,BufRead python
            \ set tabstop=4
            \ set softtabstop=4
            \ set shiftwidth=4
            \ setlocal shiftwidth=4
            \ setlocal tabstop=4
            \ setlocal softtabstop=4
            \ setlocal noautoindent
            \ fileformat=unix
    autocmd FileType python syntax keyword pythonDecorator print self
    autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4 noautoindent
    autocmd FileTYpe python set isk-=.
  augroup END

  augroup vimrc
    autocmd! bufwritepost ~/.vimrc silent! source %
    autocmd BufReadPre * setlocal foldmethod=indent
    autocmd BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
  augroup END
endif

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" vim: tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=vim:foldmethod=marker:foldmarker="\ **************************************************************/,"\ /**************************************************************
