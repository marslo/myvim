" =============================================================================
"      FileName : extra-extention
"        Author : marslo.jiao@gmail.com
"       Created : 2010-10
"       Version : 2.0.1
"    LastChange : 2024-01-13 23:37:25
" =============================================================================

" /**************************************************************
"            _                         _             _   _
"           | |                       | |           | | (_)
"   _____  _| |_ _ __ __ _    _____  _| |_ ___ _ __ | |_ _  ___  _ __
"  / _ \ \/ / __| '__/ _` |  / _ \ \/ / __/ _ \ '_ \| __| |/ _ \| '_ \
" |  __/>  <| |_| | | (_| | |  __/>  <| ||  __/ | | | |_| | (_) | | | |
"  \___/_/\_\\__|_|  \__,_|  \___/_/\_\\__\___|_| |_|\__|_|\___/|_| |_|
"
" **************************************************************/

" ycm-core/YouCompleteMe
nnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>go :YcmCompleter GoToInclude<cr>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmDiags<CR>
let g:ycm_extra_conf_globlist                      = [ '~/.marslo/ycm/*', '~/.vim/plugged/YouCompleteMe/*' ]
let g:ycm_key_invoke_completion                    = '<C-\>'
let g:ycm_echo_current_diagnostic                  = 'virtual-text'
let g:ycm_error_symbol                             = '‚úó'
let g:ycm_warning_symbol                           = '‚úπ'
let g:ycm_update_diagnostics_in_insert_mode        = 0
let g:ycm_seed_identifiers_with_syntax             = 1
let g:ycm_complete_in_comments                     = 1
let g:ycm_complete_in_strings                      = 1
let g:ycm_collect_identifiers_from_tags_files      = 1
let g:ycm_keep_logfiles                            = 1
let g:ycm_log_level                                = 'debug'
let g:ycm_show_detailed_diag_in_popup              = 1
let g:ycm_filepath_completion_use_working_dir      = 1
let g:ycm_min_num_of_chars_for_completion          = 1
let g:ycm_complete_in_comments                     = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_filetype_whitelist                       = { '*': 1, 'ycm_nofiletype': 1 }
let g:ycm_filetype_specific_completion_to_disable  = { 'gitcommit': 1, 'vim': 1 }
let g:ycm_filetype_blacklist                       = {
  \   'tagbar'  : 1,
  \   'notes'   : 1,
  \   'netrw'   : 1,
  \   'unite'   : 1,
  \   'vimwiki' : 1,
  \   'infolog' : 1,
  \   'leaderf' : 1,
  \   'mail'    : 1,
  \   'help'    : 1,
  \   'undo'    : 1
  \ }
let g:ycm_semantic_triggers                        =  {
  \   'c'         : [ '->', '.' ],
  \   'objc'      : [ '->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s', 're!\[.*\]\s' ],
  \   'ocaml'     : [ '.', '#' ],
  \   'cpp,cuda,objcpp' : [ '->', '.', '::' ],
  \   'perl'      : [ '->' ],
  \   'php'       : [ '->', '::' ],
  \   'cs,d,elixir,go,groovy,java,javascript,julia,perl6,python,scala,typescript,vb': [ '.' ],
  \   'ruby,rust' : [ '.', '::' ],
  \   'lua'       : [ '.', ':' ],
  \   'erlang'    : [ ':' ],
  \ }
augroup YCMCustomized
  autocmd!
  autocmd FileType c,cpp,sh,python,groovy,Jenkinsfile let b:ycm_hover = {
    \ 'command': 'GetDoc',
    \ 'syntax': &filetype,
    \ 'popup_params': {
    \     'maxwidth': 80,
    \     'border': [],
    \     'borderchars': ['‚îÄ', '‚îÇ', '‚îÄ', '‚îÇ', '‚îå', '‚îê', '‚îò', '‚îî'],
    \   },
    \ }
augroup END

" ycm-core/lsp-examples
let g:ycm_lsp_dir = expand( pluginHome . 'lsp-examples' )
let s:pip_os_dir  = 'bin'
if has( 'win32' ) | let s:pip_os_dir = 'Scripts' | end
source $HOME/.vim/plugged/lsp-examples/vimrc.generated

" vim-syntastic/syntastic
set statusline+=%#warningmsg#
set statusline+=\ %{SyntasticStatuslineFlag()}
set statusline+=\ %* |
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0
let g:syntastic_loc_list_height          = 2
let g:syntastic_ignore_files             = ['\.py$']
let g:syntastic_html_tidy_ignore_errors  = [" proprietary attribute \"ng-"]
let g:syntastic_enable_signs             = 1
let g:syntastic_info_symbol              = 'œä'                      " ‡†µ ‡≥≤
let g:syntastic_error_symbol             = '‚úó'                      " ‡Æì ‡Øê ‡ææ
let g:syntastic_warning_symbol           = '‚ç®'                      " ·ìÜ ·ìç êòø
let g:syntastic_style_error_symbol       = '‚ç•'
let g:syntastic_style_warning_symbol     = '‡∞†'                      " ‚ç§ ‡µ†
highlight link SyntasticErrorSign        Error
highlight link SyntasticWarningSign      GruvboxYellow
highlight link SyntasticStyleErrorSign   GruvboxRedSign
highlight link SyntasticStyleWarningSign GruvboxPurpleSign

" dense-analysis/ale                                                " :help g:ale_echo_msg_format
set omnifunc=ale#completion#OmniFunc
let g:ale_virtualtext_prefix              = '%comment% %severity% [%code%]: '
let g:ale_echo_msg_format                 = '[%linter%] %code%: %s [%severity%] '
let g:ale_echo_msg_error_str              = '‚úò'
let g:ale_echo_msg_warning_str            = '‚ö†'
let g:ale_sign_error                      = 'üí¢'                    " ‚úò üëæ üí£  üôÖ ü§¶
let g:ale_sign_warning                    = '·ëπ'                     " ‚ö† ‚∏Æ ‚∏ò ‚òπ
let g:ale_sign_info                       = '·ìÜ'                     " ‚∏ö œî êòø ê∞¶
let g:ale_sign_style_error                = '‚ç•'                     " ·ëπ
let g:ale_sign_style_warning              = '·ìç'                     " ·ìè
let g:ale_sign_column_always              = 1
let g:ale_lint_on_text_changed            = 'never'
let g:ale_fix_on_save                     = 0
let g:ale_popup_menu_enabled              = 1
let g:ale_lint_on_save                    = 1
let g:ale_warn_about_trailing_blank_lines = 1
let g:ale_warn_about_trailing_whitespace  = 1
let g:ale_set_balloons                    = 1
let g:ale_hover_to_preview                = 1
let g:ale_floating_preview                = 1
let g:ale_close_preview_on_insert         = 1
let g:ale_set_quickfix                    = 1
let g:ale_completion_autoimport           = 1
let g:ale_floating_window_border          = [ '‚îÇ', '‚îÄ', '‚ï≠', '‚ïÆ', '‚ïØ', '‚ï∞', '‚îÇ', '‚îÄ' ]
let g:ale_fixers                          = {
  \   '*' : [ 'remove_trailing_lines', 'trim_whitespace' ] ,
  \   'css': [ 'stylelint' ] ,
  \   'groovy' : [ 'npm-groovy-lint' ] ,
  \   'Jenkinsfile' : [ 'npm-groovy-lint' ]
  \}
let g:ale_linter_aliases = { 'Jenkinsfile': ['groovy'] }
let g:ale_linters                         = {
  \   'groovy' : [ 'npm-groovy-lint' ],
  \   'Jenkinsfile' : [ 'npm-groovy-lint' ]
\}
" sh
let g:ale_sh_bashate_executable           = ''
" groovy
let g:ale_groovy_npmgroovylint_options    = '--javaexecutable /usr/local/bin/java --loglevel info'

" vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=vim:foldmethod=marker:foldmarker="\ **************************************************************/,"\ /**************************************************************
